/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/index";
exports.ids = ["pages/index"];
exports.modules = {

/***/ "./components/Loader.tsx":
/*!*******************************!*\
  !*** ./components/Loader.tsx ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-bootstrap */ \"react-bootstrap\");\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__);\nvar _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Desktop\\\\Code\\\\Stonkify\\\\frontend\\\\components\\\\Loader.tsx\";\n\n\n\n\nconst Loader = () => {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    style: {\n      width: \"100px\",\n      height: \"100px\",\n      margin: \"auto\",\n      display: \"block\"\n    },\n    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"span\", {\n      className: \"sr-only\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, undefined)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, undefined);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Loader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0xvYWRlci50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBOzs7QUFFQSxNQUFNRSxNQUFNLEdBQUcsTUFBTTtBQUNuQixzQkFDRSw4REFBQyxvREFBRDtBQUNFLGFBQVMsRUFBQyxRQURaO0FBRUUsUUFBSSxFQUFDLFFBRlA7QUFHRSxTQUFLLEVBQUU7QUFDTEMsTUFBQUEsS0FBSyxFQUFFLE9BREY7QUFFTEMsTUFBQUEsTUFBTSxFQUFFLE9BRkg7QUFHTEMsTUFBQUEsTUFBTSxFQUFFLE1BSEg7QUFJTEMsTUFBQUEsT0FBTyxFQUFFO0FBSkosS0FIVDtBQUFBLDJCQVVFO0FBQU0sZUFBUyxFQUFDLFNBQWhCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBVkY7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQURGO0FBY0QsQ0FmRDs7QUFpQkEsaUVBQWVKLE1BQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL2NvbXBvbmVudHMvTG9hZGVyLnRzeD9kYWM2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcclxuXHJcbmNvbnN0IExvYWRlciA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPFNwaW5uZXJcclxuICAgICAgYW5pbWF0aW9uPVwiYm9yZGVyXCJcclxuICAgICAgcm9sZT1cInN0YXR1c1wiXHJcbiAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgd2lkdGg6IFwiMTAwcHhcIixcclxuICAgICAgICBoZWlnaHQ6IFwiMTAwcHhcIixcclxuICAgICAgICBtYXJnaW46IFwiYXV0b1wiLFxyXG4gICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcclxuICAgICAgfX1cclxuICAgID5cclxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic3Itb25seVwiPkxvYWRpbmcuLi48L3NwYW4+XHJcbiAgICA8L1NwaW5uZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvYWRlcjtcclxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiU3Bpbm5lciIsIkxvYWRlciIsIndpZHRoIiwiaGVpZ2h0IiwibWFyZ2luIiwiZGlzcGxheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Loader.tsx\n");

/***/ }),

/***/ "./components/Paginate.tsx":
/*!*********************************!*\
  !*** ./components/Paginate.tsx ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-bootstrap */ \"react-bootstrap\");\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__);\nvar _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Desktop\\\\Code\\\\Stonkify\\\\frontend\\\\components\\\\Paginate.tsx\";\n\n\n\n\nconst Paginate = ({\n  pages,\n  page,\n  isAdmin = false,\n  keyword = \"\"\n}) => {\n  return pages > 1 ? /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Pagination, {\n    children: [...Array(pages).keys()].map(x => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_0___default()), {\n      href: !isAdmin ? keyword ? `/search/query=${keyword}&page=${x + 1}` : `/?page=${x + 1}` : `/admin/productList/${x + 1}`,\n      passHref: true,\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Pagination.Item, {\n        active: x + 1 === page,\n        children: x + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, undefined)\n    }, x + 1, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, undefined))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, undefined) : /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, undefined);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Paginate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL1BhZ2luYXRlLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7OztBQUVBLE1BQU1FLFFBS0osR0FBRyxDQUFDO0FBQUVDLEVBQUFBLEtBQUY7QUFBU0MsRUFBQUEsSUFBVDtBQUFlQyxFQUFBQSxPQUFPLEdBQUcsS0FBekI7QUFBZ0NDLEVBQUFBLE9BQU8sR0FBRztBQUExQyxDQUFELEtBQW9EO0FBQ3ZELFNBQU9ILEtBQUssR0FBRyxDQUFSLGdCQUNMLDhEQUFDLHVEQUFEO0FBQUEsY0FDRyxDQUFDLEdBQUdJLEtBQUssQ0FBQ0osS0FBRCxDQUFMLENBQWFLLElBQWIsRUFBSixFQUF5QkMsR0FBekIsQ0FBOEJDLENBQUQsaUJBQzVCLDhEQUFDLGtEQUFEO0FBRUUsVUFBSSxFQUNGLENBQUNMLE9BQUQsR0FDSUMsT0FBTyxHQUNKLGlCQUFnQkEsT0FBUSxTQUFRSSxDQUFDLEdBQUcsQ0FBRSxFQURsQyxHQUVKLFVBQVNBLENBQUMsR0FBRyxDQUFFLEVBSHRCLEdBSUssc0JBQXFCQSxDQUFDLEdBQUcsQ0FBRSxFQVBwQztBQVNFLGNBQVEsTUFUVjtBQUFBLDZCQVdFLDhEQUFDLDREQUFEO0FBQWlCLGNBQU0sRUFBRUEsQ0FBQyxHQUFHLENBQUosS0FBVU4sSUFBbkM7QUFBQSxrQkFBMENNLENBQUMsR0FBRztBQUE5QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBWEYsT0FDT0EsQ0FBQyxHQUFHLENBRFg7QUFBQTtBQUFBO0FBQUE7QUFBQSxpQkFERDtBQURIO0FBQUE7QUFBQTtBQUFBO0FBQUEsZUFESyxnQkFtQkw7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQW5CRjtBQXFCRCxDQTNCRDs7QUE2QkEsaUVBQWVSLFFBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL2NvbXBvbmVudHMvUGFnaW5hdGUudHN4P2NmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xyXG5pbXBvcnQgeyBGQyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBQYWdpbmF0aW9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xyXG5cclxuY29uc3QgUGFnaW5hdGU6IEZDPHtcclxuICBwYWdlczogbnVtYmVyO1xyXG4gIHBhZ2U6IG51bWJlcjtcclxuICBpc0FkbWluPzogYm9vbGVhbjtcclxuICBrZXl3b3JkPzogc3RyaW5nO1xyXG59PiA9ICh7IHBhZ2VzLCBwYWdlLCBpc0FkbWluID0gZmFsc2UsIGtleXdvcmQgPSBcIlwiIH0pID0+IHtcclxuICByZXR1cm4gcGFnZXMgPiAxID8gKFxyXG4gICAgPFBhZ2luYXRpb24+XHJcbiAgICAgIHtbLi4uQXJyYXkocGFnZXMpLmtleXMoKV0ubWFwKCh4KSA9PiAoXHJcbiAgICAgICAgPExpbmtcclxuICAgICAgICAgIGtleT17eCArIDF9XHJcbiAgICAgICAgICBocmVmPXtcclxuICAgICAgICAgICAgIWlzQWRtaW5cclxuICAgICAgICAgICAgICA/IGtleXdvcmRcclxuICAgICAgICAgICAgICAgID8gYC9zZWFyY2gvcXVlcnk9JHtrZXl3b3JkfSZwYWdlPSR7eCArIDF9YFxyXG4gICAgICAgICAgICAgICAgOiBgLz9wYWdlPSR7eCArIDF9YFxyXG4gICAgICAgICAgICAgIDogYC9hZG1pbi9wcm9kdWN0TGlzdC8ke3ggKyAxfWBcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHBhc3NIcmVmXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPFBhZ2luYXRpb24uSXRlbSBhY3RpdmU9e3ggKyAxID09PSBwYWdlfT57eCArIDF9PC9QYWdpbmF0aW9uLkl0ZW0+XHJcbiAgICAgICAgPC9MaW5rPlxyXG4gICAgICApKX1cclxuICAgIDwvUGFnaW5hdGlvbj5cclxuICApIDogKFxyXG4gICAgPGRpdj48L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFnaW5hdGU7XHJcbiJdLCJuYW1lcyI6WyJMaW5rIiwiUGFnaW5hdGlvbiIsIlBhZ2luYXRlIiwicGFnZXMiLCJwYWdlIiwiaXNBZG1pbiIsImtleXdvcmQiLCJBcnJheSIsImtleXMiLCJtYXAiLCJ4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/Paginate.tsx\n");

/***/ }),

/***/ "./components/Product.tsx":
/*!********************************!*\
  !*** ./components/Product.tsx ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-bootstrap */ \"react-bootstrap\");\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var components_Rating__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! components/Rating */ \"./components/Rating.tsx\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__);\nvar _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Desktop\\\\Code\\\\Stonkify\\\\frontend\\\\components\\\\Product.tsx\";\n\n\n\n\n\nconst Product = ({\n  product\n}) => {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Card, {\n    className: \"my-3 p-3\",\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_0___default()), {\n      href: `/product/${product._id}`,\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(\"a\", {\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Card.Img, {\n          src: `${\"http://localhost:5000\"}${product.image}`,\n          variant: \"top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 11\n        }, undefined)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, undefined)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Card.Body, {\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_0___default()), {\n        href: `/product/${product._id}`,\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(\"a\", {\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Card.Title, {\n            as: \"div\",\n            children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(\"strong\", {\n              children: product.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 15\n            }, undefined)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, undefined)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, undefined)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Card.Title, {\n        as: \"div\",\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(components_Rating__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n          value: product.rating,\n          text: `${product.numReviews} reviews`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, undefined)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Card.Text, {\n        as: \"h3\",\n        children: product.price\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, undefined)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, undefined)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, undefined);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Product);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL1Byb2R1Y3QudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFHQTs7O0FBRUEsTUFBTUcsT0FBa0MsR0FBRyxDQUFDO0FBQUVDLEVBQUFBO0FBQUYsQ0FBRCxLQUFpQjtBQUMxRCxzQkFDRSw4REFBQyxpREFBRDtBQUFNLGFBQVMsRUFBQyxVQUFoQjtBQUFBLDRCQUNFLDhEQUFDLGtEQUFEO0FBQU0sVUFBSSxFQUFHLFlBQVdBLE9BQU8sQ0FBQ0MsR0FBSSxFQUFwQztBQUFBLDZCQUNFO0FBQUEsK0JBQ0UsOERBQUMscURBQUQ7QUFDRSxhQUFHLEVBQUcsR0FBRUMsdUJBQXdCLEdBQUVGLE9BQU8sQ0FBQ0ssS0FBTSxFQURsRDtBQUVFLGlCQUFPLEVBQUM7QUFGVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURGO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBREYsZUFTRSw4REFBQyxzREFBRDtBQUFBLDhCQUNFLDhEQUFDLGtEQUFEO0FBQU0sWUFBSSxFQUFHLFlBQVdMLE9BQU8sQ0FBQ0MsR0FBSSxFQUFwQztBQUFBLCtCQUNFO0FBQUEsaUNBQ0UsOERBQUMsdURBQUQ7QUFBWSxjQUFFLEVBQUMsS0FBZjtBQUFBLG1DQUNFO0FBQUEsd0JBQVNELE9BQU8sQ0FBQ007QUFBakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREY7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFERixlQVNFLDhEQUFDLHVEQUFEO0FBQVksVUFBRSxFQUFDLEtBQWY7QUFBQSwrQkFDRSw4REFBQyx5REFBRDtBQUNFLGVBQUssRUFBRU4sT0FBTyxDQUFDTyxNQURqQjtBQUVFLGNBQUksRUFBRyxHQUFFUCxPQUFPLENBQUNRLFVBQVc7QUFGOUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURGO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBVEYsZUFnQkUsOERBQUMsc0RBQUQ7QUFBVyxVQUFFLEVBQUMsSUFBZDtBQUFBLGtCQUFvQlIsT0FBTyxDQUFDUztBQUE1QjtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQWhCRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBVEY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBREY7QUE4QkQsQ0EvQkQ7O0FBaUNBLGlFQUFlVixPQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9jb21wb25lbnRzL1Byb2R1Y3QudHN4PzFiNDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xyXG5pbXBvcnQgeyBGQyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBDYXJkIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xyXG5cclxuaW1wb3J0IHsgSVByb2R1Y3QgfSBmcm9tIFwiaW50ZXJmYWNlcy9wcm9kdWN0cy5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IFJhdGluZyBmcm9tIFwiY29tcG9uZW50cy9SYXRpbmdcIjtcclxuXHJcbmNvbnN0IFByb2R1Y3Q6IEZDPHsgcHJvZHVjdDogSVByb2R1Y3QgfT4gPSAoeyBwcm9kdWN0IH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPENhcmQgY2xhc3NOYW1lPVwibXktMyBwLTNcIj5cclxuICAgICAgPExpbmsgaHJlZj17YC9wcm9kdWN0LyR7cHJvZHVjdC5faWR9YH0+XHJcbiAgICAgICAgPGE+XHJcbiAgICAgICAgICA8Q2FyZC5JbWdcclxuICAgICAgICAgICAgc3JjPXtgJHtwcm9jZXNzLmVudi5CQUNLRU5EX1VSTH0ke3Byb2R1Y3QuaW1hZ2V9YH1cclxuICAgICAgICAgICAgdmFyaWFudD1cInRvcFwiXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvYT5cclxuICAgICAgPC9MaW5rPlxyXG4gICAgICA8Q2FyZC5Cb2R5PlxyXG4gICAgICAgIDxMaW5rIGhyZWY9e2AvcHJvZHVjdC8ke3Byb2R1Y3QuX2lkfWB9PlxyXG4gICAgICAgICAgPGE+XHJcbiAgICAgICAgICAgIDxDYXJkLlRpdGxlIGFzPVwiZGl2XCI+XHJcbiAgICAgICAgICAgICAgPHN0cm9uZz57cHJvZHVjdC5uYW1lfTwvc3Ryb25nPlxyXG4gICAgICAgICAgICA8L0NhcmQuVGl0bGU+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgPC9MaW5rPlxyXG5cclxuICAgICAgICA8Q2FyZC5UaXRsZSBhcz1cImRpdlwiPlxyXG4gICAgICAgICAgPFJhdGluZ1xyXG4gICAgICAgICAgICB2YWx1ZT17cHJvZHVjdC5yYXRpbmd9XHJcbiAgICAgICAgICAgIHRleHQ9e2Ake3Byb2R1Y3QubnVtUmV2aWV3c30gcmV2aWV3c2B9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvQ2FyZC5UaXRsZT5cclxuXHJcbiAgICAgICAgPENhcmQuVGV4dCBhcz1cImgzXCI+e3Byb2R1Y3QucHJpY2V9PC9DYXJkLlRleHQ+XHJcbiAgICAgIDwvQ2FyZC5Cb2R5PlxyXG4gICAgPC9DYXJkPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm9kdWN0O1xyXG4iXSwibmFtZXMiOlsiTGluayIsIkNhcmQiLCJSYXRpbmciLCJQcm9kdWN0IiwicHJvZHVjdCIsIl9pZCIsInByb2Nlc3MiLCJlbnYiLCJCQUNLRU5EX1VSTCIsImltYWdlIiwibmFtZSIsInJhdGluZyIsIm51bVJldmlld3MiLCJwcmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Product.tsx\n");

/***/ }),

/***/ "./components/ProductsCarousel.tsx":
/*!*****************************************!*\
  !*** ./components/ProductsCarousel.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-bootstrap */ \"react-bootstrap\");\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__);\nvar _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Desktop\\\\Code\\\\Stonkify\\\\frontend\\\\components\\\\ProductsCarousel.tsx\";\n\n\n\n\nconst ProductsCarousel = ({\n  topProducts\n}) => {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Carousel, {\n    pause: \"hover\",\n    className: \"bg-dark\",\n    children: topProducts && topProducts.map(product => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Carousel.Item, {\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_0___default()), {\n        href: `/product/${product._id}`,\n        passHref: true,\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"div\", {\n          className: \"carousel-content\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Image, {\n            fluid: true,\n            src: `${\"http://localhost:5000\"}${product.image}`,\n            alt: product.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 17\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_1__.Carousel.Caption, {\n            className: \"carousel-caption\",\n            children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"h2\", {\n              style: {\n                textOverflow: \"ellipsis\"\n              },\n              children: [product.name, \" ($\", product.price, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 19\n            }, undefined)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 17\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 15\n        }, undefined)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, undefined)\n    }, product._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 11\n    }, undefined))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, undefined); // );\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProductsCarousel);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL1Byb2R1Y3RzQ2Fyb3VzZWwudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTs7O0FBSUEsTUFBTUcsZ0JBQWlELEdBQUcsQ0FBQztBQUFFQyxFQUFBQTtBQUFGLENBQUQsS0FBcUI7QUFDN0Usc0JBQ0UsOERBQUMscURBQUQ7QUFBVSxTQUFLLEVBQUMsT0FBaEI7QUFBd0IsYUFBUyxFQUFDLFNBQWxDO0FBQUEsY0FDR0EsV0FBVyxJQUNWQSxXQUFXLENBQUNDLEdBQVosQ0FBaUJDLE9BQUQsaUJBQ2QsOERBQUMsMERBQUQ7QUFBQSw2QkFDRSw4REFBQyxrREFBRDtBQUFNLFlBQUksRUFBRyxZQUFXQSxPQUFPLENBQUNDLEdBQUksRUFBcEM7QUFBdUMsZ0JBQVEsTUFBL0M7QUFBQSwrQkFDRTtBQUFLLG1CQUFTLEVBQUMsa0JBQWY7QUFBQSxrQ0FDRSw4REFBQyxrREFBRDtBQUNFLGlCQUFLLE1BRFA7QUFFRSxlQUFHLEVBQUcsR0FBRUMsdUJBQXdCLEdBQUVGLE9BQU8sQ0FBQ0ssS0FBTSxFQUZsRDtBQUdFLGVBQUcsRUFBRUwsT0FBTyxDQUFDTTtBQUhmO0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBREYsZUFNRSw4REFBQyw2REFBRDtBQUFrQixxQkFBUyxFQUFDLGtCQUE1QjtBQUFBLG1DQUNFO0FBQUksbUJBQUssRUFBRTtBQUFFQyxnQkFBQUEsWUFBWSxFQUFFO0FBQWhCLGVBQVg7QUFBQSx5QkFDR1AsT0FBTyxDQUFDTSxJQURYLFNBQ29CTixPQUFPLENBQUNRLEtBRDVCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURGO0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBTkY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURGLE9BQW9CUixPQUFPLENBQUNDLEdBQTVCO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBREY7QUFGSjtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBREYsQ0FENkUsQ0F3QjdFO0FBQ0QsQ0F6QkQ7O0FBMkJBLGlFQUFlSixnQkFBZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vY29tcG9uZW50cy9Qcm9kdWN0c0Nhcm91c2VsLnRzeD8zMTMyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcclxuaW1wb3J0IHsgRkMgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgQ2Fyb3VzZWwsIEltYWdlIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xyXG5cclxuaW1wb3J0IHsgSVByb2R1Y3QgfSBmcm9tIFwiaW50ZXJmYWNlcy9wcm9kdWN0cy5pbnRlcmZhY2VcIjtcclxuXHJcbmNvbnN0IFByb2R1Y3RzQ2Fyb3VzZWw6IEZDPHsgdG9wUHJvZHVjdHM6IElQcm9kdWN0W10gfT4gPSAoeyB0b3BQcm9kdWN0cyB9KSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxDYXJvdXNlbCBwYXVzZT1cImhvdmVyXCIgY2xhc3NOYW1lPVwiYmctZGFya1wiPlxyXG4gICAgICB7dG9wUHJvZHVjdHMgJiZcclxuICAgICAgICB0b3BQcm9kdWN0cy5tYXAoKHByb2R1Y3QpID0+IChcclxuICAgICAgICAgIDxDYXJvdXNlbC5JdGVtIGtleT17cHJvZHVjdC5faWR9PlxyXG4gICAgICAgICAgICA8TGluayBocmVmPXtgL3Byb2R1Y3QvJHtwcm9kdWN0Ll9pZH1gfSBwYXNzSHJlZj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcm91c2VsLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgIDxJbWFnZVxyXG4gICAgICAgICAgICAgICAgICBmbHVpZFxyXG4gICAgICAgICAgICAgICAgICBzcmM9e2Ake3Byb2Nlc3MuZW52LkJBQ0tFTkRfVVJMfSR7cHJvZHVjdC5pbWFnZX1gfVxyXG4gICAgICAgICAgICAgICAgICBhbHQ9e3Byb2R1Y3QubmFtZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8Q2Fyb3VzZWwuQ2FwdGlvbiBjbGFzc05hbWU9XCJjYXJvdXNlbC1jYXB0aW9uXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxoMiBzdHlsZT17eyB0ZXh0T3ZlcmZsb3c6IFwiZWxsaXBzaXNcIiB9fT5cclxuICAgICAgICAgICAgICAgICAgICB7cHJvZHVjdC5uYW1lfSAoJHtwcm9kdWN0LnByaWNlfSlcclxuICAgICAgICAgICAgICAgICAgPC9oMj5cclxuICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuQ2FwdGlvbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICkpfVxyXG4gICAgPC9DYXJvdXNlbD5cclxuICApO1xyXG4gIC8vICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm9kdWN0c0Nhcm91c2VsO1xyXG4iXSwibmFtZXMiOlsiTGluayIsIkNhcm91c2VsIiwiSW1hZ2UiLCJQcm9kdWN0c0Nhcm91c2VsIiwidG9wUHJvZHVjdHMiLCJtYXAiLCJwcm9kdWN0IiwiX2lkIiwicHJvY2VzcyIsImVudiIsIkJBQ0tFTkRfVVJMIiwiaW1hZ2UiLCJuYW1lIiwidGV4dE92ZXJmbG93IiwicHJpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/ProductsCarousel.tsx\n");

/***/ }),

/***/ "./components/Rating.tsx":
/*!*******************************!*\
  !*** ./components/Rating.tsx ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\nvar _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Desktop\\\\Code\\\\Stonkify\\\\frontend\\\\components\\\\Rating.tsx\";\n\n\nconst Rating = ({\n  value,\n  text,\n  color\n}) => {\n  const ratingsColor = color ? color : \"#f8e825\";\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"i\", {\n        style: {\n          color: ratingsColor\n        },\n        className: value >= 1 ? \"fas fa-star\" : value >= 0.5 ? \"fas fa-star-half-alt\" : \"far fa-star\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, undefined)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"i\", {\n        style: {\n          color: ratingsColor\n        },\n        className: value >= 2 ? \"fas fa-star\" : value >= 1.5 ? \"fas fa-star-half-alt\" : \"far fa-star\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, undefined)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"i\", {\n        style: {\n          color: ratingsColor\n        },\n        className: value >= 3 ? \"fas fa-star\" : value >= 2.5 ? \"fas fa-star-half-alt\" : \"far fa-star\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, undefined)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"i\", {\n        style: {\n          color: ratingsColor\n        },\n        className: value >= 4 ? \"fas fa-star\" : value >= 3.5 ? \"fas fa-star-half-alt\" : \"far fa-star\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, undefined)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"i\", {\n        style: {\n          color: ratingsColor\n        },\n        className: value >= 5 ? \"fas fa-star\" : value >= 4.5 ? \"fas fa-star-half-alt\" : \"far fa-star\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, undefined)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n      children: text && text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, undefined)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, undefined);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Rating);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL1JhdGluZy50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUEsTUFBTUEsTUFBNEQsR0FBRyxDQUFDO0FBQ3BFQyxFQUFBQSxLQURvRTtBQUVwRUMsRUFBQUEsSUFGb0U7QUFHcEVDLEVBQUFBO0FBSG9FLENBQUQsS0FJL0Q7QUFDSixRQUFNQyxZQUFZLEdBQUdELEtBQUssR0FBR0EsS0FBSCxHQUFXLFNBQXJDO0FBQ0Esc0JBQ0U7QUFBQSw0QkFDRTtBQUFBLDZCQUNFO0FBQ0UsYUFBSyxFQUFFO0FBQUVBLFVBQUFBLEtBQUssRUFBRUM7QUFBVCxTQURUO0FBRUUsaUJBQVMsRUFDUEgsS0FBSyxJQUFJLENBQVQsR0FDSSxhQURKLEdBRUlBLEtBQUssSUFBSSxHQUFULEdBQ0Esc0JBREEsR0FFQTtBQVBSO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQURGLGVBYUU7QUFBQSw2QkFDRTtBQUNFLGFBQUssRUFBRTtBQUFFRSxVQUFBQSxLQUFLLEVBQUVDO0FBQVQsU0FEVDtBQUVFLGlCQUFTLEVBQ1BILEtBQUssSUFBSSxDQUFULEdBQ0ksYUFESixHQUVJQSxLQUFLLElBQUksR0FBVCxHQUNBLHNCQURBLEdBRUE7QUFQUjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREY7QUFBQTtBQUFBO0FBQUE7QUFBQSxpQkFiRixlQXlCRTtBQUFBLDZCQUNFO0FBQ0UsYUFBSyxFQUFFO0FBQUVFLFVBQUFBLEtBQUssRUFBRUM7QUFBVCxTQURUO0FBRUUsaUJBQVMsRUFDUEgsS0FBSyxJQUFJLENBQVQsR0FDSSxhQURKLEdBRUlBLEtBQUssSUFBSSxHQUFULEdBQ0Esc0JBREEsR0FFQTtBQVBSO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQXpCRixlQXFDRTtBQUFBLDZCQUNFO0FBQ0UsYUFBSyxFQUFFO0FBQUVFLFVBQUFBLEtBQUssRUFBRUM7QUFBVCxTQURUO0FBRUUsaUJBQVMsRUFDUEgsS0FBSyxJQUFJLENBQVQsR0FDSSxhQURKLEdBRUlBLEtBQUssSUFBSSxHQUFULEdBQ0Esc0JBREEsR0FFQTtBQVBSO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQXJDRixlQWlERTtBQUFBLDZCQUNFO0FBQ0UsYUFBSyxFQUFFO0FBQUVFLFVBQUFBLEtBQUssRUFBRUM7QUFBVCxTQURUO0FBRUUsaUJBQVMsRUFDUEgsS0FBSyxJQUFJLENBQVQsR0FDSSxhQURKLEdBRUlBLEtBQUssSUFBSSxHQUFULEdBQ0Esc0JBREEsR0FFQTtBQVBSO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQWpERixlQTZERTtBQUFBLGdCQUFPQyxJQUFJLElBQUlBO0FBQWY7QUFBQTtBQUFBO0FBQUE7QUFBQSxpQkE3REY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBREY7QUFpRUQsQ0F2RUQ7O0FBeUVBLGlFQUFlRixNQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9jb21wb25lbnRzL1JhdGluZy50c3g/MjIyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGQyB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuY29uc3QgUmF0aW5nOiBGQzx7IHZhbHVlOiBudW1iZXI7IHRleHQ/OiBzdHJpbmc7IGNvbG9yPzogc3RyaW5nIH0+ID0gKHtcclxuICB2YWx1ZSxcclxuICB0ZXh0LFxyXG4gIGNvbG9yLFxyXG59KSA9PiB7XHJcbiAgY29uc3QgcmF0aW5nc0NvbG9yID0gY29sb3IgPyBjb2xvciA6IFwiI2Y4ZTgyNVwiO1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlxyXG4gICAgICA8c3Bhbj5cclxuICAgICAgICA8aVxyXG4gICAgICAgICAgc3R5bGU9e3sgY29sb3I6IHJhdGluZ3NDb2xvciB9fVxyXG4gICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgdmFsdWUgPj0gMVxyXG4gICAgICAgICAgICAgID8gXCJmYXMgZmEtc3RhclwiXHJcbiAgICAgICAgICAgICAgOiB2YWx1ZSA+PSAwLjVcclxuICAgICAgICAgICAgICA/IFwiZmFzIGZhLXN0YXItaGFsZi1hbHRcIlxyXG4gICAgICAgICAgICAgIDogXCJmYXIgZmEtc3RhclwiXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPjwvaT5cclxuICAgICAgPC9zcGFuPlxyXG4gICAgICA8c3Bhbj5cclxuICAgICAgICA8aVxyXG4gICAgICAgICAgc3R5bGU9e3sgY29sb3I6IHJhdGluZ3NDb2xvciB9fVxyXG4gICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgdmFsdWUgPj0gMlxyXG4gICAgICAgICAgICAgID8gXCJmYXMgZmEtc3RhclwiXHJcbiAgICAgICAgICAgICAgOiB2YWx1ZSA+PSAxLjVcclxuICAgICAgICAgICAgICA/IFwiZmFzIGZhLXN0YXItaGFsZi1hbHRcIlxyXG4gICAgICAgICAgICAgIDogXCJmYXIgZmEtc3RhclwiXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPjwvaT5cclxuICAgICAgPC9zcGFuPlxyXG4gICAgICA8c3Bhbj5cclxuICAgICAgICA8aVxyXG4gICAgICAgICAgc3R5bGU9e3sgY29sb3I6IHJhdGluZ3NDb2xvciB9fVxyXG4gICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgdmFsdWUgPj0gM1xyXG4gICAgICAgICAgICAgID8gXCJmYXMgZmEtc3RhclwiXHJcbiAgICAgICAgICAgICAgOiB2YWx1ZSA+PSAyLjVcclxuICAgICAgICAgICAgICA/IFwiZmFzIGZhLXN0YXItaGFsZi1hbHRcIlxyXG4gICAgICAgICAgICAgIDogXCJmYXIgZmEtc3RhclwiXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPjwvaT5cclxuICAgICAgPC9zcGFuPlxyXG4gICAgICA8c3Bhbj5cclxuICAgICAgICA8aVxyXG4gICAgICAgICAgc3R5bGU9e3sgY29sb3I6IHJhdGluZ3NDb2xvciB9fVxyXG4gICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgdmFsdWUgPj0gNFxyXG4gICAgICAgICAgICAgID8gXCJmYXMgZmEtc3RhclwiXHJcbiAgICAgICAgICAgICAgOiB2YWx1ZSA+PSAzLjVcclxuICAgICAgICAgICAgICA/IFwiZmFzIGZhLXN0YXItaGFsZi1hbHRcIlxyXG4gICAgICAgICAgICAgIDogXCJmYXIgZmEtc3RhclwiXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPjwvaT5cclxuICAgICAgPC9zcGFuPlxyXG4gICAgICA8c3Bhbj5cclxuICAgICAgICA8aVxyXG4gICAgICAgICAgc3R5bGU9e3sgY29sb3I6IHJhdGluZ3NDb2xvciB9fVxyXG4gICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgdmFsdWUgPj0gNVxyXG4gICAgICAgICAgICAgID8gXCJmYXMgZmEtc3RhclwiXHJcbiAgICAgICAgICAgICAgOiB2YWx1ZSA+PSA0LjVcclxuICAgICAgICAgICAgICA/IFwiZmFzIGZhLXN0YXItaGFsZi1hbHRcIlxyXG4gICAgICAgICAgICAgIDogXCJmYXIgZmEtc3RhclwiXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPjwvaT5cclxuICAgICAgPC9zcGFuPlxyXG4gICAgICA8c3Bhbj57dGV4dCAmJiB0ZXh0fTwvc3Bhbj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSYXRpbmc7XHJcbiJdLCJuYW1lcyI6WyJSYXRpbmciLCJ2YWx1ZSIsInRleHQiLCJjb2xvciIsInJhdGluZ3NDb2xvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Rating.tsx\n");

/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = __webpack_require__(/*! ../shared/lib/router/router */ \"./node_modules/next/dist/shared/lib/router/router.js\");\n\nvar _router1 = __webpack_require__(/*! ./router */ \"./node_modules/next/dist/client/router.js\");\n\nvar _useIntersection = __webpack_require__(/*! ./use-intersection */ \"./node_modules/next/dist/client/use-intersection.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst prefetched = {};\n\nfunction prefetch(router, href, as, options) {\n  if (true) return;\n  if (!(0, _router).isLocalURL(href)) return; // Prefetch the JSON page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n\n  router.prefetch(href, as, options).catch(err => {\n    if (true) {\n      // rethrow to show invalid URL errors\n      throw err;\n    }\n  });\n  const curLocale = options && typeof options.locale !== 'undefined' ? options.locale : router && router.locale; // Join on an invalid URI character\n\n  prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')] = true;\n}\n\nfunction isModifiedEvent(event) {\n  const {\n    target\n  } = event.currentTarget;\n  return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || event.nativeEvent && event.nativeEvent.which === 2;\n}\n\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale) {\n  const {\n    nodeName\n  } = e.currentTarget; // anchors inside an svg have a lowercase nodeName\n\n  const isAnchorNodeName = nodeName.toUpperCase() === 'A';\n\n  if (isAnchorNodeName && (isModifiedEvent(e) || !(0, _router).isLocalURL(href))) {\n    // ignore click for browser’s default behavior\n    return;\n  }\n\n  e.preventDefault(); // replace state instead of push if prop is present\n\n  router[replace ? 'replace' : 'push'](href, as, {\n    shallow,\n    locale,\n    scroll\n  });\n}\n\nfunction Link(props) {\n  if (true) {\n    function createPropError(args) {\n      return new Error(`Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` + ( false ? 0 : ''));\n    } // TypeScript trick for type-guarding:\n\n\n    const requiredPropsGuard = {\n      href: true\n    };\n    const requiredProps = Object.keys(requiredPropsGuard);\n    requiredProps.forEach(key => {\n      if (key === 'href') {\n        if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: props[key] === null ? 'null' : typeof props[key]\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    }); // TypeScript trick for type-guarding:\n\n    const optionalPropsGuard = {\n      as: true,\n      replace: true,\n      scroll: true,\n      shallow: true,\n      passHref: true,\n      prefetch: true,\n      locale: true\n    };\n    const optionalProps = Object.keys(optionalPropsGuard);\n    optionalProps.forEach(key => {\n      const valType = typeof props[key];\n\n      if (key === 'as') {\n        if (props[key] && valType !== 'string' && valType !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: valType\n          });\n        }\n      } else if (key === 'locale') {\n        if (props[key] && valType !== 'string') {\n          throw createPropError({\n            key,\n            expected: '`string`',\n            actual: valType\n          });\n        }\n      } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch') {\n        if (props[key] != null && valType !== 'boolean') {\n          throw createPropError({\n            key,\n            expected: '`boolean`',\n            actual: valType\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    }); // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n\n    const hasWarned = _react.default.useRef(false);\n\n    if (props.prefetch && !hasWarned.current) {\n      hasWarned.current = true;\n      console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated');\n    }\n  }\n\n  const p = props.prefetch !== false;\n  const router = (0, _router1).useRouter();\n\n  const {\n    href,\n    as\n  } = _react.default.useMemo(() => {\n    const [resolvedHref, resolvedAs] = (0, _router).resolveHref(router, props.href, true);\n    return {\n      href: resolvedHref,\n      as: props.as ? (0, _router).resolveHref(router, props.as) : resolvedAs || resolvedHref\n    };\n  }, [router, props.href, props.as]);\n\n  const previousHref = _react.default.useRef(href);\n\n  const previousAs = _react.default.useRef(as);\n\n  let {\n    children,\n    replace,\n    shallow,\n    scroll,\n    locale\n  } = props;\n\n  if (typeof children === 'string') {\n    children = /*#__PURE__*/_react.default.createElement(\"a\", null, children);\n  } // This will return the first child, if multiple are provided it will throw an error\n\n\n  let child;\n\n  if (true) {\n    try {\n      child = _react.default.Children.only(children);\n    } catch (err) {\n      if (!children) {\n        throw new Error(`No children were passed to <Link> with \\`href\\` of \\`${props.href}\\` but one child is required https://nextjs.org/docs/messages/link-no-children`);\n      }\n\n      throw new Error(`Multiple children were passed to <Link> with \\`href\\` of \\`${props.href}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` + ( false ? 0 : ''));\n    }\n  } else {}\n\n  const childRef = child && typeof child === 'object' && child.ref;\n  const [setIntersectionRef, isVisible, resetVisible] = (0, _useIntersection).useIntersection({\n    rootMargin: '200px'\n  });\n\n  const setRef = _react.default.useCallback(el => {\n    // Before the link getting observed, check if visible state need to be reset\n    if (previousAs.current !== as || previousHref.current !== href) {\n      resetVisible();\n      previousAs.current = as;\n      previousHref.current = href;\n    }\n\n    setIntersectionRef(el);\n\n    if (childRef) {\n      if (typeof childRef === 'function') childRef(el);else if (typeof childRef === 'object') {\n        childRef.current = el;\n      }\n    }\n  }, [as, childRef, href, resetVisible, setIntersectionRef]);\n\n  _react.default.useEffect(() => {\n    const shouldPrefetch = isVisible && p && (0, _router).isLocalURL(href);\n    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale;\n    const isPrefetched = prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')];\n\n    if (shouldPrefetch && !isPrefetched) {\n      prefetch(router, href, as, {\n        locale: curLocale\n      });\n    }\n  }, [as, href, isVisible, locale, p, router]);\n\n  const childProps = {\n    ref: setRef,\n    onClick: e => {\n      if (true) {\n        if (!e) {\n          throw new Error(`Component rendered inside next/link has to pass click event to \"onClick\" prop.`);\n        }\n      }\n\n      if (child.props && typeof child.props.onClick === 'function') {\n        child.props.onClick(e);\n      }\n\n      if (!e.defaultPrevented) {\n        linkClicked(e, router, href, as, replace, shallow, scroll, locale);\n      }\n    }\n  };\n\n  childProps.onMouseEnter = e => {\n    if (child.props && typeof child.props.onMouseEnter === 'function') {\n      child.props.onMouseEnter(e);\n    }\n\n    if ((0, _router).isLocalURL(href)) {\n      prefetch(router, href, as, {\n        priority: true\n      });\n    }\n  }; // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n  // defined, we specify the current 'href', so that repetition is not needed by the user\n\n\n  if (props.passHref || child.type === 'a' && !('href' in child.props)) {\n    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale; // we only render domain locales if we are currently on a domain locale\n    // so that locale links are still visitable in development/preview envs\n\n    const localeDomain = router && router.isLocaleDomain && (0, _router).getDomainLocale(as, curLocale, router && router.locales, router && router.domainLocales);\n    childProps.href = localeDomain || (0, _router).addBasePath((0, _router).addLocale(as, curLocale, router && router.defaultLocale));\n  }\n\n  return /*#__PURE__*/_react.default.cloneElement(child, childProps);\n}\n\nvar _default = Link;\nexports[\"default\"] = _default;\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/link.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.removePathTrailingSlash = removePathTrailingSlash;\nexports.normalizePathTrailingSlash = void 0;\n\nfunction removePathTrailingSlash(path) {\n  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;\n}\n\nconst normalizePathTrailingSlash =  false ? 0 : removePathTrailingSlash;\nexports.normalizePathTrailingSlash = normalizePathTrailingSlash;\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELCtCQUFBLEdBQWtDRSx1QkFBbEM7QUFDQUYsa0NBQUEsR0FBcUMsS0FBSyxDQUExQzs7QUFDQSxTQUFTRSx1QkFBVCxDQUFpQ0UsSUFBakMsRUFBdUM7QUFDbkMsU0FBT0EsSUFBSSxDQUFDQyxRQUFMLENBQWMsR0FBZCxLQUFzQkQsSUFBSSxLQUFLLEdBQS9CLEdBQXFDQSxJQUFJLENBQUNFLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBQyxDQUFmLENBQXJDLEdBQXlERixJQUFoRTtBQUNIOztBQUNELE1BQU1ELDBCQUEwQixHQUFHSSxNQUFBLEdBQXFDSCxDQUFyQyxHQVEvQkYsdUJBUko7QUFTQUYsa0NBQUEsR0FBcUNHLDBCQUFyQzs7QUFFQSxJQUFJLE9BQU9ILE9BQU8sQ0FBQ1csT0FBZixLQUEyQixVQUEzQixJQUEwQyxPQUFPWCxPQUFPLENBQUNXLE9BQWYsS0FBMkIsUUFBM0IsSUFBdUNYLE9BQU8sQ0FBQ1csT0FBUixLQUFvQixJQUF6RyxFQUFnSDtBQUM5R2IsRUFBQUEsTUFBTSxDQUFDYyxNQUFQLENBQWNaLE9BQU8sQ0FBQ1csT0FBdEIsRUFBK0JYLE9BQS9CO0FBQ0FhLEVBQUFBLE1BQU0sQ0FBQ2IsT0FBUCxHQUFpQkEsT0FBTyxDQUFDVyxPQUF6QjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanM/NGMyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2ggPSByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaDtcbmV4cG9ydHMubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG5mdW5jdGlvbiByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGguZW5kc1dpdGgoJy8nKSAmJiBwYXRoICE9PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5jb25zdCBub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCA9IHByb2Nlc3MuZW52Ll9fTkVYVF9UUkFJTElOR19TTEFTSCA/IChwYXRoKT0+e1xuICAgIGlmICgvXFwuW14vXStcXC8/JC8udGVzdChwYXRoKSkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2gocGF0aCk7XG4gICAgfSBlbHNlIGlmIChwYXRoLmVuZHNXaXRoKCcvJykpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhdGggKyAnLyc7XG4gICAgfVxufSA6IHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoO1xuZXhwb3J0cy5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCA9IG5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoO1xuXG5pZiAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkge1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2giLCJub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCIsInBhdGgiLCJlbmRzV2l0aCIsInNsaWNlIiwicHJvY2VzcyIsImVudiIsIl9fTkVYVF9UUkFJTElOR19TTEFTSCIsInRlc3QiLCJkZWZhdWx0IiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/normalize-trailing-slash.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.cancelIdleCallback = exports.requestIdleCallback = void 0;\n\nconst requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function (cb) {\n  let start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function () {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n};\n\nexports.requestIdleCallback = requestIdleCallback;\n\nconst cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function (id) {\n  return clearTimeout(id);\n};\n\nexports.cancelIdleCallback = cancelIdleCallback;\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELDBCQUFBLEdBQTZCQSwyQkFBQSxHQUE4QixLQUFLLENBQWhFOztBQUNBLE1BQU1HLG1CQUFtQixHQUFHLE9BQU9DLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0JBLElBQUksQ0FBQ0QsbUJBQXBDLElBQTJEQyxJQUFJLENBQUNELG1CQUFMLENBQXlCRSxJQUF6QixDQUE4QkMsTUFBOUIsQ0FBM0QsSUFBb0csVUFBU0MsRUFBVCxFQUFhO0FBQ3pJLE1BQUlDLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFMLEVBQVo7QUFDQSxTQUFPQyxVQUFVLENBQUMsWUFBVztBQUN6QkosSUFBQUEsRUFBRSxDQUFDO0FBQ0NLLE1BQUFBLFVBQVUsRUFBRSxLQURiO0FBRUNDLE1BQUFBLGFBQWEsRUFBRSxZQUFXO0FBQ3RCLGVBQU9DLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWSxNQUFNTixJQUFJLENBQUNDLEdBQUwsS0FBYUYsS0FBbkIsQ0FBWixDQUFQO0FBQ0g7QUFKRixLQUFELENBQUY7QUFNSCxHQVBnQixFQU9kLENBUGMsQ0FBakI7QUFRSCxDQVZEOztBQVdBUiwyQkFBQSxHQUE4QkcsbUJBQTlCOztBQUNBLE1BQU1ELGtCQUFrQixHQUFHLE9BQU9FLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0JBLElBQUksQ0FBQ0Ysa0JBQXBDLElBQTBERSxJQUFJLENBQUNGLGtCQUFMLENBQXdCRyxJQUF4QixDQUE2QkMsTUFBN0IsQ0FBMUQsSUFBa0csVUFBU1UsRUFBVCxFQUFhO0FBQ3RJLFNBQU9DLFlBQVksQ0FBQ0QsRUFBRCxDQUFuQjtBQUNILENBRkQ7O0FBR0FoQiwwQkFBQSxHQUE2QkUsa0JBQTdCOztBQUVBLElBQUksT0FBT0YsT0FBTyxDQUFDa0IsT0FBZixLQUEyQixVQUEzQixJQUEwQyxPQUFPbEIsT0FBTyxDQUFDa0IsT0FBZixLQUEyQixRQUEzQixJQUF1Q2xCLE9BQU8sQ0FBQ2tCLE9BQVIsS0FBb0IsSUFBekcsRUFBZ0g7QUFDOUdwQixFQUFBQSxNQUFNLENBQUNxQixNQUFQLENBQWNuQixPQUFPLENBQUNrQixPQUF0QixFQUErQmxCLE9BQS9CO0FBQ0FvQixFQUFBQSxNQUFNLENBQUNwQixPQUFQLEdBQWlCQSxPQUFPLENBQUNrQixPQUF6QjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanM/MWUyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2FuY2VsSWRsZUNhbGxiYWNrID0gZXhwb3J0cy5yZXF1ZXN0SWRsZUNhbGxiYWNrID0gdm9pZCAwO1xuY29uc3QgcmVxdWVzdElkbGVDYWxsYmFjayA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgJiYgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSB8fCBmdW5jdGlvbihjYikge1xuICAgIGxldCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNiKHtcbiAgICAgICAgICAgIGRpZFRpbWVvdXQ6IGZhbHNlLFxuICAgICAgICAgICAgdGltZVJlbWFpbmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIDUwIC0gKERhdGUubm93KCkgLSBzdGFydCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LCAxKTtcbn07XG5leHBvcnRzLnJlcXVlc3RJZGxlQ2FsbGJhY2sgPSByZXF1ZXN0SWRsZUNhbGxiYWNrO1xuY29uc3QgY2FuY2VsSWRsZUNhbGxiYWNrID0gdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrICYmIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSB8fCBmdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xufTtcbmV4cG9ydHMuY2FuY2VsSWRsZUNhbGxiYWNrID0gY2FuY2VsSWRsZUNhbGxiYWNrO1xuXG5pZiAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkge1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwicmVxdWVzdElkbGVDYWxsYmFjayIsInNlbGYiLCJiaW5kIiwid2luZG93IiwiY2IiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJzZXRUaW1lb3V0IiwiZGlkVGltZW91dCIsInRpbWVSZW1haW5pbmciLCJNYXRoIiwibWF4IiwiaWQiLCJjbGVhclRpbWVvdXQiLCJkZWZhdWx0IiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/request-idle-callback.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/route-loader.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/route-loader.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.markAssetError = markAssetError;\nexports.isAssetError = isAssetError;\nexports.getClientBuildManifest = getClientBuildManifest;\nexports.getMiddlewareManifest = getMiddlewareManifest;\nexports.createRouteLoader = createRouteLoader;\n\nvar _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/utils/get-asset-path-from-route */ \"../shared/lib/router/utils/get-asset-path-from-route\"));\n\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive\n// considers as \"Good\" time-to-interactive. We must assume something went\n// wrong beyond this point, and then fall-back to a full page transition to\n// show the user something of value.\n\n\nconst MS_MAX_IDLE_DELAY = 3800;\n\nfunction withFuture(key, map, generator) {\n  let entry = map.get(key);\n\n  if (entry) {\n    if ('future' in entry) {\n      return entry.future;\n    }\n\n    return Promise.resolve(entry);\n  }\n\n  let resolver;\n  const prom = new Promise(resolve => {\n    resolver = resolve;\n  });\n  map.set(key, entry = {\n    resolve: resolver,\n    future: prom\n  });\n  return generator ? generator() // eslint-disable-next-line no-sequences\n  .then(value => (resolver(value), value)).catch(err => {\n    map.delete(key);\n    throw err;\n  }) : prom;\n}\n\nfunction hasPrefetch(link) {\n  try {\n    link = document.createElement('link');\n    return (// detect IE11 since it supports prefetch but isn't detected\n      // with relList.support\n      !!window.MSInputMethodContext && !!document.documentMode || link.relList.supports('prefetch')\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\nconst canPrefetch = hasPrefetch();\n\nfunction prefetchViaDom(href, as, link) {\n  return new Promise((res, rej) => {\n    const selector = `\n      link[rel=\"prefetch\"][href^=\"${href}\"],\n      link[rel=\"preload\"][href^=\"${href}\"],\n      script[src^=\"${href}\"]`;\n\n    if (document.querySelector(selector)) {\n      return res();\n    }\n\n    link = document.createElement('link'); // The order of property assignment here is intentional:\n\n    if (as) link.as = as;\n    link.rel = `prefetch`;\n    link.crossOrigin = undefined;\n    link.onload = res;\n    link.onerror = rej; // `href` should always be last:\n\n    link.href = href;\n    document.head.appendChild(link);\n  });\n}\n\nconst ASSET_LOAD_ERROR = Symbol('ASSET_LOAD_ERROR');\n\nfunction markAssetError(err) {\n  return Object.defineProperty(err, ASSET_LOAD_ERROR, {});\n}\n\nfunction isAssetError(err) {\n  return err && ASSET_LOAD_ERROR in err;\n}\n\nfunction appendScript(src, script) {\n  return new Promise((resolve, reject) => {\n    script = document.createElement('script'); // The order of property assignment here is intentional.\n    // 1. Setup success/failure hooks in case the browser synchronously\n    //    executes when `src` is set.\n\n    script.onload = resolve;\n\n    script.onerror = () => reject(markAssetError(new Error(`Failed to load script: ${src}`))); // 2. Configure the cross-origin attribute before setting `src` in case the\n    //    browser begins to fetch.\n\n\n    script.crossOrigin = undefined; // 3. Finally, set the source and inject into the DOM in case the child\n    //    must be appended for fetching to start.\n\n    script.src = src;\n    document.body.appendChild(script);\n  });\n} // We wait for pages to be built in dev before we start the route transition\n// timeout to prevent an un-necessary hard navigation in development.\n\n\nlet devBuildPromise; // Resolve a promise that times out after given amount of milliseconds.\n\nfunction resolvePromiseWithTimeout(p, ms, err) {\n  return new Promise((resolve, reject) => {\n    let cancelled = false;\n    p.then(r => {\n      // Resolved, cancel the timeout\n      cancelled = true;\n      resolve(r);\n    }).catch(reject); // We wrap these checks separately for better dead-code elimination in\n    // production bundles.\n\n    if (true) {\n      (devBuildPromise || Promise.resolve()).then(() => {\n        (0, _requestIdleCallback).requestIdleCallback(() => setTimeout(() => {\n          if (!cancelled) {\n            reject(err);\n          }\n        }, ms));\n      });\n    }\n\n    if (false) {}\n  });\n}\n\nfunction getClientBuildManifest() {\n  if (self.__BUILD_MANIFEST) {\n    return Promise.resolve(self.__BUILD_MANIFEST);\n  }\n\n  const onBuildManifest = new Promise(resolve => {\n    // Mandatory because this is not concurrent safe:\n    const cb = self.__BUILD_MANIFEST_CB;\n\n    self.__BUILD_MANIFEST_CB = () => {\n      resolve(self.__BUILD_MANIFEST);\n      cb && cb();\n    };\n  });\n  return resolvePromiseWithTimeout(onBuildManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client build manifest')));\n}\n\nfunction getMiddlewareManifest() {\n  if (self.__MIDDLEWARE_MANIFEST) {\n    return Promise.resolve(self.__MIDDLEWARE_MANIFEST);\n  }\n\n  const onMiddlewareManifest = new Promise(resolve => {\n    const cb = self.__MIDDLEWARE_MANIFEST_CB;\n\n    self.__MIDDLEWARE_MANIFEST_CB = () => {\n      resolve(self.__MIDDLEWARE_MANIFEST);\n      cb && cb();\n    };\n  });\n  return resolvePromiseWithTimeout(onMiddlewareManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client middleware manifest')));\n}\n\nfunction getFilesForRoute(assetPrefix, route) {\n  if (true) {\n    return Promise.resolve({\n      scripts: [assetPrefix + '/_next/static/chunks/pages' + encodeURI((0, _getAssetPathFromRoute).default(route, '.js'))],\n      // Styles are handled by `style-loader` in development:\n      css: []\n    });\n  }\n\n  return getClientBuildManifest().then(manifest => {\n    if (!(route in manifest)) {\n      throw markAssetError(new Error(`Failed to lookup route: ${route}`));\n    }\n\n    const allFiles = manifest[route].map(entry => assetPrefix + '/_next/' + encodeURI(entry));\n    return {\n      scripts: allFiles.filter(v => v.endsWith('.js')),\n      css: allFiles.filter(v => v.endsWith('.css'))\n    };\n  });\n}\n\nfunction createRouteLoader(assetPrefix) {\n  const entrypoints = new Map();\n  const loadedScripts = new Map();\n  const styleSheets = new Map();\n  const routes = new Map();\n\n  function maybeExecuteScript(src) {\n    // With HMR we might need to \"reload\" scripts when they are\n    // disposed and readded. Executing scripts twice has no functional\n    // differences\n    if (false) {} else {\n      return appendScript(src);\n    }\n  }\n\n  function fetchStyleSheet(href) {\n    let prom = styleSheets.get(href);\n\n    if (prom) {\n      return prom;\n    }\n\n    styleSheets.set(href, prom = fetch(href).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to load stylesheet: ${href}`);\n      }\n\n      return res.text().then(text => ({\n        href: href,\n        content: text\n      }));\n    }).catch(err => {\n      throw markAssetError(err);\n    }));\n    return prom;\n  }\n\n  return {\n    whenEntrypoint(route) {\n      return withFuture(route, entrypoints);\n    },\n\n    onEntrypoint(route, execute) {\n      (execute ? Promise.resolve().then(() => execute()).then(exports => ({\n        component: exports && exports.default || exports,\n        exports: exports\n      }), err => ({\n        error: err\n      })) : Promise.resolve(undefined)).then(input => {\n        const old = entrypoints.get(route);\n\n        if (old && 'resolve' in old) {\n          if (input) {\n            entrypoints.set(route, input);\n            old.resolve(input);\n          }\n        } else {\n          if (input) {\n            entrypoints.set(route, input);\n          } else {\n            entrypoints.delete(route);\n          } // when this entrypoint has been resolved before\n          // the route is outdated and we want to invalidate\n          // this cache entry\n\n\n          routes.delete(route);\n        }\n      });\n    },\n\n    loadRoute(route, prefetch) {\n      return withFuture(route, routes, () => {\n        let devBuildPromiseResolve;\n\n        if (true) {\n          devBuildPromise = new Promise(resolve => {\n            devBuildPromiseResolve = resolve;\n          });\n        }\n\n        return resolvePromiseWithTimeout(getFilesForRoute(assetPrefix, route).then(({\n          scripts,\n          css\n        }) => {\n          return Promise.all([entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)), Promise.all(css.map(fetchStyleSheet))]);\n        }).then(res => {\n          return this.whenEntrypoint(route).then(entrypoint => ({\n            entrypoint,\n            styles: res[1]\n          }));\n        }), MS_MAX_IDLE_DELAY, markAssetError(new Error(`Route did not complete loading: ${route}`))).then(({\n          entrypoint,\n          styles\n        }) => {\n          const res = Object.assign({\n            styles: styles\n          }, entrypoint);\n          return 'error' in entrypoint ? entrypoint : res;\n        }).catch(err => {\n          if (prefetch) {\n            // we don't want to cache errors during prefetch\n            throw err;\n          }\n\n          return {\n            error: err\n          };\n        }).finally(() => {\n          return devBuildPromiseResolve === null || devBuildPromiseResolve === void 0 ? void 0 : devBuildPromiseResolve();\n        });\n      });\n    },\n\n    prefetch(route) {\n      // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118\n      // License: Apache 2.0\n      let cn;\n\n      if (cn = navigator.connection) {\n        // Don't prefetch if using 2G or if Save-Data is enabled.\n        if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();\n      }\n\n      return getFilesForRoute(assetPrefix, route).then(output => Promise.all(canPrefetch ? output.scripts.map(script => prefetchViaDom(script, 'script')) : [])).then(() => {\n        (0, _requestIdleCallback).requestIdleCallback(() => this.loadRoute(route, true).catch(() => {}));\n      }).catch( // swallow prefetch errors\n      () => {});\n    }\n\n  };\n}\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/route-loader.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"Router\", ({\n  enumerable: true,\n  get: function () {\n    return _router.default;\n  }\n}));\nObject.defineProperty(exports, \"withRouter\", ({\n  enumerable: true,\n  get: function () {\n    return _withRouter.default;\n  }\n}));\nexports.useRouter = useRouter;\nexports.createRouter = createRouter;\nexports.makePublicRouterInstance = makePublicRouterInstance;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/router */ \"./node_modules/next/dist/shared/lib/router/router.js\"));\n\nvar _routerContext = __webpack_require__(/*! ../shared/lib/router-context */ \"../shared/lib/router-context\");\n\nvar _isError = _interopRequireDefault(__webpack_require__(/*! ../lib/is-error */ \"./node_modules/next/dist/lib/is-error.js\"));\n\nvar _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ \"./node_modules/next/dist/client/with-router.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst singletonRouter = {\n  router: null,\n  readyCallbacks: [],\n\n  ready(cb) {\n    if (this.router) return cb();\n\n    if (false) {}\n  }\n\n}; // Create public properties and methods of the router in the singletonRouter\n\nconst urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale', 'isReady', 'isPreview', 'isLocaleDomain', 'domainLocales'];\nconst routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];\nconst coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it\n\nObject.defineProperty(singletonRouter, 'events', {\n  get() {\n    return _router.default.events;\n  }\n\n});\nurlPropertyFields.forEach(field => {\n  // Here we need to use Object.defineProperty because we need to return\n  // the property assigned to the actual router\n  // The value might get changed as we change routes and this is the\n  // proper way to access it\n  Object.defineProperty(singletonRouter, field, {\n    get() {\n      const router = getRouter();\n      return router[field];\n    }\n\n  });\n});\ncoreMethodFields.forEach(field => {\n  singletonRouter[field] = (...args) => {\n    const router = getRouter();\n    return router[field](...args);\n  };\n});\nrouterEvents.forEach(event => {\n  singletonRouter.ready(() => {\n    _router.default.events.on(event, (...args) => {\n      const eventField = `on${event.charAt(0).toUpperCase()}${event.substring(1)}`;\n      const _singletonRouter = singletonRouter;\n\n      if (_singletonRouter[eventField]) {\n        try {\n          _singletonRouter[eventField](...args);\n        } catch (err) {\n          console.error(`Error when running the Router event: ${eventField}`);\n          console.error((0, _isError).default(err) ? `${err.message}\\n${err.stack}` : err + '');\n        }\n      }\n    });\n  });\n});\n\nfunction getRouter() {\n  if (!singletonRouter.router) {\n    const message = 'No router instance found.\\n' + 'You should only use \"next/router\" on the client side of your app.\\n';\n    throw new Error(message);\n  }\n\n  return singletonRouter.router;\n}\n\nvar _default = singletonRouter;\nexports[\"default\"] = _default;\n\nfunction useRouter() {\n  return _react.default.useContext(_routerContext.RouterContext);\n}\n\nfunction createRouter(...args) {\n  singletonRouter.router = new _router.default(...args);\n  singletonRouter.readyCallbacks.forEach(cb => cb());\n  singletonRouter.readyCallbacks = [];\n  return singletonRouter.router;\n}\n\nfunction makePublicRouterInstance(router) {\n  const scopedRouter = router;\n  const instance = {};\n\n  for (const property of urlPropertyFields) {\n    if (typeof scopedRouter[property] === 'object') {\n      instance[property] = Object.assign(Array.isArray(scopedRouter[property]) ? [] : {}, scopedRouter[property]) // makes sure query is not stateful\n      ;\n      continue;\n    }\n\n    instance[property] = scopedRouter[property];\n  } // Events is a static property on the router, the router doesn't have to be initialized to use it\n\n\n  instance.events = _router.default.events;\n  coreMethodFields.forEach(field => {\n    instance[field] = (...args) => {\n      return scopedRouter[field](...args);\n    };\n  });\n  return instance;\n}\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/router.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/use-intersection.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/use-intersection.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.useIntersection = useIntersection;\n\nvar _react = __webpack_require__(/*! react */ \"react\");\n\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\");\n\nconst hasIntersectionObserver = typeof IntersectionObserver !== 'undefined';\n\nfunction useIntersection({\n  rootRef,\n  rootMargin,\n  disabled\n}) {\n  const isDisabled = disabled || !hasIntersectionObserver;\n  const unobserve = (0, _react).useRef();\n  const [visible, setVisible] = (0, _react).useState(false);\n  const [root, setRoot] = (0, _react).useState(rootRef ? rootRef.current : null);\n  const setRef = (0, _react).useCallback(el => {\n    if (unobserve.current) {\n      unobserve.current();\n      unobserve.current = undefined;\n    }\n\n    if (isDisabled || visible) return;\n\n    if (el && el.tagName) {\n      unobserve.current = observe(el, isVisible => isVisible && setVisible(isVisible), {\n        root,\n        rootMargin\n      });\n    }\n  }, [isDisabled, root, rootMargin, visible]);\n  const resetVisible = (0, _react).useCallback(() => {\n    setVisible(false);\n  }, []);\n  (0, _react).useEffect(() => {\n    if (!hasIntersectionObserver) {\n      if (!visible) {\n        const idleCallback = (0, _requestIdleCallback).requestIdleCallback(() => setVisible(true));\n        return () => (0, _requestIdleCallback).cancelIdleCallback(idleCallback);\n      }\n    }\n  }, [visible]);\n  (0, _react).useEffect(() => {\n    if (rootRef) setRoot(rootRef.current);\n  }, [rootRef]);\n  return [setRef, visible, resetVisible];\n}\n\nfunction observe(element, callback, options) {\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options);\n  elements.set(element, callback);\n  observer.observe(element);\n  return function unobserve() {\n    elements.delete(element);\n    observer.unobserve(element); // Destroy observer when there's nothing left to watch:\n\n    if (elements.size === 0) {\n      observer.disconnect();\n      observers.delete(id);\n      let index = idList.findIndex(obj => obj.root === id.root && obj.margin === id.margin);\n\n      if (index > -1) {\n        idList.splice(index, 1);\n      }\n    }\n  };\n}\n\nconst observers = new Map();\nconst idList = [];\n\nfunction createObserver(options) {\n  const id = {\n    root: options.root || null,\n    margin: options.rootMargin || ''\n  };\n  let existing = idList.find(obj => obj.root === id.root && obj.margin === id.margin);\n  let instance;\n\n  if (existing) {\n    instance = observers.get(existing);\n  } else {\n    instance = observers.get(id);\n    idList.push(id);\n  }\n\n  if (instance) {\n    return instance;\n  }\n\n  const elements = new Map();\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      const callback = elements.get(entry.target);\n      const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n\n      if (callback && isVisible) {\n        callback(isVisible);\n      }\n    });\n  }, options);\n  observers.set(id, instance = {\n    id,\n    observer,\n    elements\n  });\n  return instance;\n}\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/use-intersection.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = withRouter;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = __webpack_require__(/*! ./router */ \"./node_modules/next/dist/client/router.js\");\n\nfunction withRouter(ComposedComponent) {\n  function WithRouterWrapper(props) {\n    return /*#__PURE__*/_react.default.createElement(ComposedComponent, Object.assign({\n      router: (0, _router).useRouter()\n    }, props));\n  }\n\n  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps;\n  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;\n\n  if (true) {\n    const name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';\n    WithRouterWrapper.displayName = `withRouter(${name})`;\n  }\n\n  return WithRouterWrapper;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC93aXRoLXJvdXRlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0FBQ3pDRyxFQUFBQSxLQUFLLEVBQUU7QUFEa0MsQ0FBN0M7QUFHQUQsa0JBQUEsR0FBa0JHLFVBQWxCOztBQUNBLElBQUlDLE1BQU0sR0FBR0Msc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsb0JBQUQsQ0FBUixDQUFuQzs7QUFDQSxJQUFJQyxPQUFPLEdBQUdELG1CQUFPLENBQUMsMkRBQUQsQ0FBckI7O0FBQ0EsU0FBU0gsVUFBVCxDQUFvQkssaUJBQXBCLEVBQXVDO0FBQ25DLFdBQVNDLGlCQUFULENBQTJCQyxLQUEzQixFQUFrQztBQUM5QixXQUFPLGFBQWNOLE1BQU0sQ0FBQ0YsT0FBUCxDQUFlUyxhQUFmLENBQTZCSCxpQkFBN0IsRUFBZ0RWLE1BQU0sQ0FBQ2MsTUFBUCxDQUFjO0FBQy9FQyxNQUFBQSxNQUFNLEVBQUUsQ0FBQyxHQUFHTixPQUFKLEVBQWFPLFNBQWI7QUFEdUUsS0FBZCxFQUVsRUosS0FGa0UsQ0FBaEQsQ0FBckI7QUFHSDs7QUFDREQsRUFBQUEsaUJBQWlCLENBQUNNLGVBQWxCLEdBQW9DUCxpQkFBaUIsQ0FBQ08sZUFBdEQ7QUFDQU4sRUFBQUEsaUJBQWlCLENBQUNPLG1CQUFsQixHQUF3Q1IsaUJBQWlCLENBQUNRLG1CQUExRDs7QUFDQSxZQUEyQztBQUN2QyxVQUFNQyxJQUFJLEdBQUdULGlCQUFpQixDQUFDVSxXQUFsQixJQUFpQ1YsaUJBQWlCLENBQUNTLElBQW5ELElBQTJELFNBQXhFO0FBQ0FSLElBQUFBLGlCQUFpQixDQUFDUyxXQUFsQixHQUFpQyxjQUFhRCxJQUFLLEdBQW5EO0FBQ0g7O0FBQ0QsU0FBT1IsaUJBQVA7QUFDSDs7QUFDRCxTQUFTSixzQkFBVCxDQUFnQ2MsR0FBaEMsRUFBcUM7QUFDakMsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQ2pDakIsSUFBQUEsT0FBTyxFQUFFaUI7QUFEd0IsR0FBckM7QUFHSDs7QUFFRCxJQUFJLE9BQU9uQixPQUFPLENBQUNFLE9BQWYsS0FBMkIsVUFBM0IsSUFBMEMsT0FBT0YsT0FBTyxDQUFDRSxPQUFmLEtBQTJCLFFBQTNCLElBQXVDRixPQUFPLENBQUNFLE9BQVIsS0FBb0IsSUFBekcsRUFBZ0g7QUFDOUdKLEVBQUFBLE1BQU0sQ0FBQ2MsTUFBUCxDQUFjWixPQUFPLENBQUNFLE9BQXRCLEVBQStCRixPQUEvQjtBQUNBcUIsRUFBQUEsTUFBTSxDQUFDckIsT0FBUCxHQUFpQkEsT0FBTyxDQUFDRSxPQUF6QjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC93aXRoLXJvdXRlci5qcz9hYzdjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gd2l0aFJvdXRlcjtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3JvdXRlciA9IHJlcXVpcmUoXCIuL3JvdXRlclwiKTtcbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9zZWRDb21wb25lbnQpIHtcbiAgICBmdW5jdGlvbiBXaXRoUm91dGVyV3JhcHBlcihwcm9wcykge1xuICAgICAgICByZXR1cm4oLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvc2VkQ29tcG9uZW50LCBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIHJvdXRlcjogKDAsIF9yb3V0ZXIpLnVzZVJvdXRlcigpXG4gICAgICAgIH0sIHByb3BzKSkpO1xuICAgIH1cbiAgICBXaXRoUm91dGVyV3JhcHBlci5nZXRJbml0aWFsUHJvcHMgPSBDb21wb3NlZENvbXBvbmVudC5nZXRJbml0aWFsUHJvcHM7XG4gICAgV2l0aFJvdXRlcldyYXBwZXIub3JpZ0dldEluaXRpYWxQcm9wcyA9IENvbXBvc2VkQ29tcG9uZW50Lm9yaWdHZXRJbml0aWFsUHJvcHM7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IENvbXBvc2VkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvc2VkQ29tcG9uZW50Lm5hbWUgfHwgJ1Vua25vd24nO1xuICAgICAgICBXaXRoUm91dGVyV3JhcHBlci5kaXNwbGF5TmFtZSA9IGB3aXRoUm91dGVyKCR7bmFtZX0pYDtcbiAgICB9XG4gICAgcmV0dXJuIFdpdGhSb3V0ZXJXcmFwcGVyO1xufVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuXG5pZiAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkge1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoLXJvdXRlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0Iiwid2l0aFJvdXRlciIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JvdXRlciIsIkNvbXBvc2VkQ29tcG9uZW50IiwiV2l0aFJvdXRlcldyYXBwZXIiLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJhc3NpZ24iLCJyb3V0ZXIiLCJ1c2VSb3V0ZXIiLCJnZXRJbml0aWFsUHJvcHMiLCJvcmlnR2V0SW5pdGlhbFByb3BzIiwibmFtZSIsImRpc3BsYXlOYW1lIiwib2JqIiwiX19lc01vZHVsZSIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/with-router.js\n");

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/router.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/router.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getDomainLocale = getDomainLocale;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports[\"default\"] = void 0;\n\nvar _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ \"./node_modules/next/dist/client/normalize-trailing-slash.js\");\n\nvar _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ \"./node_modules/next/dist/client/route-loader.js\");\n\nvar _isError = _interopRequireWildcard(__webpack_require__(/*! ../../../lib/is-error */ \"./node_modules/next/dist/lib/is-error.js\"));\n\nvar _denormalizePagePath = __webpack_require__(/*! ../../../server/denormalize-page-path */ \"../../../server/denormalize-page-path\");\n\nvar _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"../i18n/normalize-locale-path\");\n\nvar _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ \"../mitt\"));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"../utils\");\n\nvar _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"./utils/is-dynamic\");\n\nvar _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ \"./utils/parse-relative-url\");\n\nvar _querystring = __webpack_require__(/*! ./utils/querystring */ \"./utils/querystring\");\n\nvar _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ \"./utils/resolve-rewrites\"));\n\nvar _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ \"./utils/route-matcher\");\n\nvar _routeRegex = __webpack_require__(/*! ./utils/route-regex */ \"./utils/route-regex\");\n\nvar _getMiddlewareRegex = __webpack_require__(/*! ./utils/get-middleware-regex */ \"./utils/get-middleware-regex\");\n\nvar _formatUrl = __webpack_require__(/*! ./utils/format-url */ \"./utils/format-url\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nlet detectDomainLocale;\n\nif (false) {}\n\nconst basePath =  false || '';\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction addPathPrefix(path, prefix) {\n  if (!path.startsWith('/') || !prefix) {\n    return path;\n  }\n\n  const pathname = pathNoQueryHash(path);\n  return (0, _normalizeTrailingSlash).normalizePathTrailingSlash(`${prefix}${pathname}`) + path.slice(pathname.length);\n}\n\nfunction hasPathPrefix(path, prefix) {\n  path = pathNoQueryHash(path);\n  return path === prefix || path.startsWith(prefix + '/');\n}\n\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n  if (false) {} else {\n    return false;\n  }\n}\n\nfunction addLocale(path, locale, defaultLocale) {\n  if (false) {}\n\n  return path;\n}\n\nfunction delLocale(path, locale) {\n  if (false) {}\n\n  return path;\n}\n\nfunction pathNoQueryHash(path) {\n  const queryIndex = path.indexOf('?');\n  const hashIndex = path.indexOf('#');\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);\n  }\n\n  return path;\n}\n\nfunction hasBasePath(path) {\n  return hasPathPrefix(path, basePath);\n}\n\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath);\n}\n\nfunction delBasePath(path) {\n  path = path.slice(basePath.length);\n  if (!path.startsWith('/')) path = `/${path}`;\n  return path;\n}\n\nfunction isLocalURL(url) {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#') || url.startsWith('?')) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = (0, _utils).getLocationOrigin();\n    const resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction interpolateAs(route, asPathname, query) {\n  let interpolatedRoute = '';\n  const dynamicRegex = (0, _routeRegex).getRouteRegex(route);\n  const dynamicGroups = dynamicRegex.groups;\n  const dynamicMatches = // Try to match the dynamic route against the asPath\n  (asPathname !== route ? (0, _routeMatcher).getRouteMatcher(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href\n  // TODO: should this take priority; also need to change in the router.\n  query;\n  interpolatedRoute = route;\n  const params = Object.keys(dynamicGroups);\n\n  if (!params.every(param => {\n    let value = dynamicMatches[param] || '';\n    const {\n      repeat,\n      optional\n    } = dynamicGroups[param]; // support single-level catch-all\n    // TODO: more robust handling for user-error (passing `/`)\n\n    let replaced = `[${repeat ? '...' : ''}${param}]`;\n\n    if (optional) {\n      replaced = `${!value ? '/' : ''}[${replaced}]`;\n    }\n\n    if (repeat && !Array.isArray(value)) value = [value];\n    return (optional || param in dynamicMatches) && (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just\n    // path delimiter escaped since they are being inserted\n    // into the URL and we expect URL encoded segments\n    // when parsing dynamic route params\n    segment => encodeURIComponent(segment)).join('/') : encodeURIComponent(value)) || '/');\n  })) {\n    interpolatedRoute = '' // did not satisfy all requirements\n    ; // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n\n  return {\n    params,\n    result: interpolatedRoute\n  };\n}\n\nfunction omitParmsFromQuery(query, params) {\n  const filteredQuery = {};\n  Object.keys(query).forEach(key => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key];\n    }\n  });\n  return filteredQuery;\n}\n\nfunction resolveHref(router, href, resolveAs) {\n  // we use a dummy base url for relative urls\n  let base;\n  let urlAsString = typeof href === 'string' ? href : (0, _formatUrl).formatWithValidation(href); // repeated slashes and backslashes in the URL are considered\n  // invalid and will never match a Next.js page/file\n\n  const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//);\n  const urlAsStringNoProto = urlProtoMatch ? urlAsString.slice(urlProtoMatch[0].length) : urlAsString;\n  const urlParts = urlAsStringNoProto.split('?');\n\n  if ((urlParts[0] || '').match(/(\\/\\/|\\\\)/)) {\n    console.error(`Invalid href passed to next/router: ${urlAsString}, repeated forward-slashes (//) or backslashes \\\\ are not valid in the href`);\n    const normalizedUrl = (0, _utils).normalizeRepeatedSlashes(urlAsStringNoProto);\n    urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl;\n  } // Return because it cannot be routed by the Next.js router\n\n\n  if (!isLocalURL(urlAsString)) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n\n  try {\n    base = new URL(urlAsString.startsWith('#') ? router.asPath : router.pathname, 'http://n');\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n');\n  }\n\n  try {\n    const finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash).normalizePathTrailingSlash(finalUrl.pathname);\n    let interpolatedAs = '';\n\n    if ((0, _isDynamic).isDynamicRoute(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n      const query = (0, _querystring).searchParamsToUrlQuery(finalUrl.searchParams);\n      const {\n        result,\n        params\n      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);\n\n      if (result) {\n        interpolatedAs = (0, _formatUrl).formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params)\n        });\n      }\n    } // if the origin didn't change, it means we received a relative href\n\n\n    const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;\n  } catch (_1) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n}\n\nfunction stripOrigin(url) {\n  const origin = (0, _utils).getLocationOrigin();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = resolveHref(router, url, true);\n  const origin = (0, _utils).getLocationOrigin();\n  const hrefHadOrigin = resolvedHref.startsWith(origin);\n  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);\n  const preparedAs = as ? stripOrigin(resolveHref(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  const cleanPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _denormalizePagePath).denormalizePagePath(pathname));\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(page => {\n      if ((0, _isDynamic).isDynamicRoute(page) && (0, _routeRegex).getRouteRegex(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n}\n\nconst manualScrollRestoration =  false && 0;\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\n\nfunction fetchRetry(url, attempts, opts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(res => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1, opts);\n      }\n\n      if (res.status === 404) {\n        return res.json().then(data => {\n          if (data.notFound) {\n            return {\n              notFound: SSG_DATA_NOT_FOUND\n            };\n          }\n\n          throw new Error(`Failed to load static props`);\n        });\n      }\n\n      throw new Error(`Failed to load static props`);\n    }\n\n    return opts.text ? res.text() : res.json();\n  });\n}\n\nfunction fetchNextData(dataHref, isServerRender, text, inflightCache, persistCache) {\n  const {\n    href: cacheKey\n  } = new URL(dataHref, window.location.href);\n\n  if (inflightCache[cacheKey] !== undefined) {\n    return inflightCache[cacheKey];\n  }\n\n  return inflightCache[cacheKey] = fetchRetry(dataHref, isServerRender ? 3 : 1, {\n    text\n  }).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      (0, _routeLoader).markAssetError(err);\n    }\n\n    throw err;\n  }).then(data => {\n    if (!persistCache || true) {\n      delete inflightCache[cacheKey];\n    }\n\n    return data;\n  }).catch(err => {\n    delete inflightCache[cacheKey];\n    throw err;\n  });\n}\n\nclass Router {\n  constructor(pathname1, query1, as1, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription,\n    isFallback,\n    locale,\n    locales,\n    defaultLocale,\n    domainLocales,\n    isPreview,\n    isRsc\n  }) {\n    // Static Data Cache\n    this.sdc = {}; // In-flight Server Data Requests, for deduping\n\n    this.sdr = {}; // In-flight middleware preflight requests\n\n    this.sde = {};\n    this._idx = 0;\n\n    this.onPopState = e => {\n      const state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', (0, _formatUrl).formatWithValidation({\n          pathname: addBasePath(pathname),\n          query\n        }), (0, _utils).getURL());\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      }\n\n      let forcedScroll;\n      const {\n        url,\n        as,\n        options,\n        idx\n      } = state;\n\n      if (false) {}\n\n      this._idx = idx;\n      const {\n        pathname\n      } = (0, _parseRelativeUrl).parseRelativeUrl(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n      if (this.isSsr && as === addBasePath(this.asPath) && pathname === addBasePath(this.pathname)) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n\n      this.change('replaceState', url, as, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname1); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname1 !== '/_error') {\n      this.components[route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n        __N_RSC: !!isRsc\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: []\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    const autoExportDynamic = (0, _isDynamic).isDynamicRoute(pathname1) && self.__NEXT_DATA__.autoExport;\n\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isLocaleDomain = false;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);\n\n    if (false) {}\n\n    this.state = {\n      route,\n      pathname: pathname1,\n      query: query1,\n      asPath: autoExportDynamic ? pathname1 : as1,\n      isPreview: !!isPreview,\n      locale:  false ? 0 : undefined,\n      isFallback\n    };\n\n    if (false) {}\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\n  * Go back in history\n  */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n  * Performs a `pushState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  push(url, as, options = {}) {\n    if (false) {}\n\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  }\n  /**\n  * Performs a `replaceState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  replace(url, as, options = {}) {\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n\n  async change(method, url, as, options, forcedScroll) {\n    if (!isLocalURL(url)) {\n      window.location.href = url;\n      return false;\n    }\n\n    const shouldResolveHref = options._h || options._shouldResolveHref || pathNoQueryHash(url) === pathNoQueryHash(as);\n\n    const nextState = _objectSpread({}, this.state); // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n\n\n    if (options._h) {\n      this.isReady = true;\n    }\n\n    const prevLocale = nextState.locale;\n\n    if (false) { var ref; }\n\n    if (!options._h) {\n      this.isSsr = false;\n    } // marking route changes as a navigation start entry\n\n\n    if (_utils.ST) {\n      performance.mark('routeChange');\n    }\n\n    const {\n      shallow = false,\n      scroll = true\n    } = options;\n    const routeProps = {\n      shallow\n    };\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute, routeProps);\n    }\n\n    as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));\n    const cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, nextState.locale);\n    this._inFlightRoute = as;\n    let localeChange = prevLocale !== nextState.locale; // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n\n    if (!options._h && this.onlyAHashChange(cleanedAs) && !localeChange) {\n      nextState.asPath = cleanedAs;\n      Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n      this.changeState(method, url, as, _objectSpread(_objectSpread({}, options), {}, {\n        scroll: false\n      }));\n\n      if (scroll) {\n        this.scrollToHash(cleanedAs);\n      }\n\n      this.set(nextState, this.components[nextState.route], null);\n      Router.events.emit('hashChangeComplete', as, routeProps);\n      return true;\n    }\n\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname,\n      query\n    } = parsed; // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n\n    let pages, rewrites;\n\n    try {\n      [pages, {\n        __rewrites: rewrites\n      }] = await Promise.all([this.pageLoader.getPageList(), (0, _routeLoader).getClientBuildManifest(), this.pageLoader.getMiddlewareList()]);\n    } catch (err) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      window.location.href = as;\n      return false;\n    } // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n\n\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = 'replaceState';\n    } // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n\n\n    let resolvedAs = as; // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n\n    pathname = pathname ? (0, _normalizeTrailingSlash).removePathTrailingSlash(delBasePath(pathname)) : pathname;\n\n    if (shouldResolveHref && pathname !== '/_error') {\n      options._shouldResolveHref = true;\n\n      if (false) {} else {\n        parsed.pathname = resolveDynamicRoute(pathname, pages);\n\n        if (parsed.pathname !== pathname) {\n          pathname = parsed.pathname;\n          parsed.pathname = addBasePath(pathname);\n          url = (0, _formatUrl).formatWithValidation(parsed);\n        }\n      }\n    }\n\n    if (!isLocalURL(as)) {\n      if (true) {\n        throw new Error(`Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` + `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`);\n      }\n\n      window.location.href = as;\n      return false;\n    }\n\n    resolvedAs = delLocale(delBasePath(resolvedAs), nextState.locale);\n    /**\n    * If the route update was triggered for client-side hydration and\n    * the rendered route is not dynamic do not check the preflight\n    * request as it is not necessary.\n    */\n\n    if ((!options.shallow || options._h === 1) && (options._h !== 1 || (0, _isDynamic).isDynamicRoute((0, _normalizeTrailingSlash).removePathTrailingSlash(pathname)))) {\n      const effect = await this._preflightRequest({\n        as,\n        cache: false,\n        pages,\n        pathname,\n        query,\n        locale: nextState.locale,\n        isPreview: nextState.isPreview\n      });\n\n      if (effect.type === 'rewrite') {\n        query = _objectSpread(_objectSpread({}, query), effect.parsedAs.query);\n        resolvedAs = effect.asPath;\n        pathname = effect.resolvedHref;\n        parsed.pathname = effect.resolvedHref;\n        url = (0, _formatUrl).formatWithValidation(parsed);\n      } else if (effect.type === 'redirect' && effect.newAs) {\n        return this.change(method, effect.newUrl, effect.newAs, options);\n      } else if (effect.type === 'redirect' && effect.destination) {\n        window.location.href = effect.destination;\n        return new Promise(() => {});\n      } else if (effect.type === 'refresh' && as !== window.location.pathname) {\n        window.location.href = as;\n        return new Promise(() => {});\n      }\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n\n    if ((0, _isDynamic).isDynamicRoute(route)) {\n      const parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs);\n      const asPathname = parsedAs.pathname;\n      const routeRegex = (0, _routeRegex).getRouteRegex(route);\n      const routeMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(asPathname);\n      const shouldInterpolate = route === asPathname;\n      const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};\n\n      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n\n        if (missingParams.length > 0) {\n          if (true) {\n            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \\`as\\` and \\`href\\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n          }\n\n          throw new Error((shouldInterpolate ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) + `Read more: https://nextjs.org/docs/messages/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);\n        }\n      } else if (shouldInterpolate) {\n        as = (0, _formatUrl).formatWithValidation(Object.assign({}, parsedAs, {\n          pathname: interpolatedAs.result,\n          query: omitParmsFromQuery(query, interpolatedAs.params)\n        }));\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch);\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as, routeProps);\n\n    try {\n      var ref1, ref2;\n      let routeInfo = await this.getRouteInfo(route, pathname, query, as, resolvedAs, routeProps, nextState.locale, nextState.isPreview);\n      let {\n        error,\n        props,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo; // handle redirect on client-transition\n\n      if ((__N_SSG || __N_SSP) && props) {\n        if (props.pageProps && props.pageProps.__N_REDIRECT) {\n          const destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n\n          if (destination.startsWith('/') && props.pageProps.__N_REDIRECT_BASE_PATH !== false) {\n            const parsedHref = (0, _parseRelativeUrl).parseRelativeUrl(destination);\n            parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n            const {\n              url: newUrl,\n              as: newAs\n            } = prepareUrlAs(this, destination, destination);\n            return this.change(method, newUrl, newAs, options);\n          }\n\n          window.location.href = destination;\n          return new Promise(() => {});\n        }\n\n        nextState.isPreview = !!props.__N_PREVIEW; // handle SSG data 404\n\n        if (props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute;\n\n          try {\n            await this.fetchComponent('/404');\n            notFoundRoute = '/404';\n          } catch (_) {\n            notFoundRoute = '/_error';\n          }\n\n          routeInfo = await this.getRouteInfo(notFoundRoute, notFoundRoute, query, as, resolvedAs, {\n            shallow: false\n          }, nextState.locale, nextState.isPreview);\n        }\n      }\n\n      Router.events.emit('beforeHistoryChange', as, routeProps);\n      this.changeState(method, url, as, options);\n\n      if (options._h && pathname === '/_error' && ((ref1 = self.__NEXT_DATA__.props) === null || ref1 === void 0 ? void 0 : (ref2 = ref1.pageProps) === null || ref2 === void 0 ? void 0 : ref2.statusCode) === 500 && (props === null || props === void 0 ? void 0 : props.pageProps)) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        props.pageProps.statusCode = 500;\n      } // shallow routing is only allowed for same page URL changes.\n\n\n      const isValidShallowRoute = options.shallow && nextState.route === route;\n\n      var _scroll;\n\n      const shouldScroll = (_scroll = options.scroll) !== null && _scroll !== void 0 ? _scroll : !isValidShallowRoute;\n      const resetScroll = shouldScroll ? {\n        x: 0,\n        y: 0\n      } : null;\n      await this.set(_objectSpread(_objectSpread({}, nextState), {}, {\n        route,\n        pathname,\n        query,\n        asPath: cleanedAs,\n        isFallback: false\n      }), routeInfo, forcedScroll !== null && forcedScroll !== void 0 ? forcedScroll : resetScroll).catch(e => {\n        if (e.cancelled) error = error || e;else throw e;\n      });\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs, routeProps);\n        throw error;\n      }\n\n      if (false) {}\n\n      Router.events.emit('routeChangeComplete', as, routeProps);\n      return true;\n    } catch (err1) {\n      if ((0, _isError).default(err1) && err1.cancelled) {\n        return false;\n      }\n\n      throw err1;\n    }\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || (0, _utils).getURL() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true,\n        idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1\n      }, // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n\n  async handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n\n    if ((0, _routeLoader).isAssetError(err) || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n\n      window.location.href = as; // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n\n      throw buildCancellationError();\n    }\n\n    try {\n      let Component;\n      let styleSheets;\n      let props;\n\n      if (typeof Component === 'undefined' || typeof styleSheets === 'undefined') {\n        ({\n          page: Component,\n          styleSheets\n        } = await this.fetchComponent('/_error'));\n      }\n\n      const routeInfo = {\n        props,\n        Component,\n        styleSheets,\n        err,\n        error: err\n      };\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query\n          });\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr);\n          routeInfo.props = {};\n        }\n      }\n\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError((0, _isError).default(routeInfoErr) ? routeInfoErr : new Error(routeInfoErr + ''), pathname, query, as, routeProps, true);\n    }\n  }\n\n  async getRouteInfo(route, pathname, query, as, resolvedAs, routeProps, locale, isPreview) {\n    try {\n      const existingRouteInfo = this.components[route];\n\n      if (routeProps.shallow && existingRouteInfo && this.route === route) {\n        return existingRouteInfo;\n      }\n\n      let cachedRouteInfo = undefined; // can only use non-initial route info\n      // cannot reuse route info in development since it can change after HMR\n\n      if (false) {}\n\n      const routeInfo = cachedRouteInfo || (await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        styleSheets: res.styleSheets,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP,\n        __N_RSC: !!res.mod.__next_rsc__\n      })));\n      const {\n        Component,\n        __N_SSG,\n        __N_SSP,\n        __N_RSC\n      } = routeInfo;\n\n      if (true) {\n        const {\n          isValidElementType\n        } = __webpack_require__(/*! next/dist/compiled/react-is */ \"next/dist/compiled/react-is\");\n\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n\n      let dataHref; // For server components, non-SSR pages will have statically optimized\n      // flight data in a production build.\n      // So only development and SSR pages will always have the real-time\n      // generated and streamed flight data.\n\n      const useStreamedFlightData = ( true) && __N_RSC;\n\n      if (__N_SSG || __N_SSP || __N_RSC) {\n        dataHref = this.pageLoader.getDataHref({\n          href: (0, _formatUrl).formatWithValidation({\n            pathname,\n            query\n          }),\n          asPath: resolvedAs,\n          ssg: __N_SSG,\n          flight: useStreamedFlightData,\n          locale\n        });\n      }\n\n      const props = await this._getData(() => (__N_SSG || __N_SSP || __N_RSC) && !useStreamedFlightData ? fetchNextData(dataHref, this.isSsr, false, __N_SSG ? this.sdc : this.sdr, !!__N_SSG && !isPreview) : this.getInitialProps(Component, // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as,\n        locale,\n        locales: this.locales,\n        defaultLocale: this.defaultLocale\n      }));\n\n      if (__N_RSC) {\n        if (useStreamedFlightData) {\n          const {\n            data\n          } = await this._getData(() => this._getFlightData(dataHref));\n          props.pageProps = Object.assign(props.pageProps, {\n            __flight__: data\n          });\n        } else {\n          const {\n            __flight__\n          } = props;\n          props.pageProps = Object.assign({}, props.pageProps, {\n            __flight__\n          });\n        }\n      }\n\n      routeInfo.props = props;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err) {\n      return this.handleRouteInfoError((0, _isError).getProperError(err), pathname, query, as, routeProps);\n    }\n  }\n\n  set(state, data, resetScroll) {\n    this.state = state;\n    return this.sub(data, this.components['/_app'].Component, resetScroll);\n  }\n  /**\n  * Callback to execute before replacing router state\n  * @param cb callback to be executed\n  */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash = ''] = as.split('#'); // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n\n    if (hash === '' || hash === 'top') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n  * Prefetch page code, you may wait for the data during page rendering.\n  * This feature only works in production!\n  * @param url the href of prefetched page\n  * @param asPath the as path of the prefetched page\n  */\n\n\n  async prefetch(url, asPath = url, options = {}) {\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname,\n      query\n    } = parsed;\n\n    if (false) {}\n\n    const pages = await this.pageLoader.getPageList();\n    let resolvedAs = asPath;\n\n    if (false) {} else {\n      parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n      if (parsed.pathname !== pathname) {\n        pathname = parsed.pathname;\n        parsed.pathname = pathname;\n        url = (0, _formatUrl).formatWithValidation(parsed);\n      }\n    } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n\n    if (true) {\n      return;\n    }\n\n    const effects = await this._preflightRequest({\n      as: addBasePath(asPath),\n      cache: true,\n      pages,\n      pathname,\n      query,\n      locale: this.locale,\n      isPreview: this.isPreview\n    });\n\n    if (effects.type === 'rewrite') {\n      parsed.pathname = effects.resolvedHref;\n      pathname = effects.resolvedHref;\n      query = _objectSpread(_objectSpread({}, query), effects.parsedAs.query);\n      resolvedAs = effects.asPath;\n      url = (0, _formatUrl).formatWithValidation(parsed);\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n    await Promise.all([this.pageLoader._isSsg(route).then(isSsg => {\n      return isSsg ? fetchNextData(this.pageLoader.getDataHref({\n        href: url,\n        asPath: resolvedAs,\n        ssg: true,\n        locale: typeof options.locale !== 'undefined' ? options.locale : this.locale\n      }), false, false, this.sdc, true) : false;\n    }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n  }\n\n  async fetchComponent(route) {\n    let cancelled = false;\n\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n\n    const handleCancelled = () => {\n      if (cancelled) {\n        const error = new Error(`Abort fetching component for route: \"${route}\"`);\n        error.cancelled = true;\n        throw error;\n      }\n\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n    };\n\n    try {\n      const componentResult = await this.pageLoader.loadPage(route);\n      handleCancelled();\n      return componentResult;\n    } catch (err) {\n      handleCancelled();\n      throw err;\n    }\n  }\n\n  _getData(fn) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n\n      return data;\n    });\n  }\n\n  _getFlightData(dataHref) {\n    // Do not cache RSC flight response since it's not a static resource\n    return fetchNextData(dataHref, true, true, this.sdc, false).then(serialized => {\n      return {\n        data: serialized\n      };\n    });\n  }\n\n  async _preflightRequest(options) {\n    const asPathname = pathNoQueryHash(options.as);\n    const cleanedAs = delLocale(hasBasePath(asPathname) ? delBasePath(asPathname) : asPathname, options.locale);\n    const fns = await this.pageLoader.getMiddlewareList();\n    const requiresPreflight = fns.some(([middleware, isSSR]) => {\n      return (0, _routeMatcher).getRouteMatcher((0, _getMiddlewareRegex).getMiddlewareRegex(middleware, !isSSR))(cleanedAs);\n    });\n\n    if (!requiresPreflight) {\n      return {\n        type: 'next'\n      };\n    }\n\n    const preflightHref = addLocale(options.as, options.locale);\n    let preflight;\n\n    try {\n      preflight = await this._getPreflightData({\n        preflightHref,\n        shouldCache: options.cache,\n        isPreview: options.isPreview\n      });\n    } catch (err) {\n      // If preflight request fails, we need to do a hard-navigation.\n      return {\n        type: 'redirect',\n        destination: options.as\n      };\n    }\n\n    if (preflight.rewrite) {\n      // for external rewrites we need to do a hard navigation\n      // to the resource\n      if (!preflight.rewrite.startsWith('/')) {\n        return {\n          type: 'redirect',\n          destination: options.as\n        };\n      }\n\n      const parsed = (0, _parseRelativeUrl).parseRelativeUrl((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(preflight.rewrite) ? delBasePath(preflight.rewrite) : preflight.rewrite, this.locales).pathname);\n      const fsPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash(parsed.pathname);\n      let matchedPage;\n      let resolvedHref;\n\n      if (options.pages.includes(fsPathname)) {\n        matchedPage = true;\n        resolvedHref = fsPathname;\n      } else {\n        resolvedHref = resolveDynamicRoute(fsPathname, options.pages);\n\n        if (resolvedHref !== parsed.pathname && options.pages.includes(resolvedHref)) {\n          matchedPage = true;\n        }\n      }\n\n      return {\n        type: 'rewrite',\n        asPath: parsed.pathname,\n        parsedAs: parsed,\n        matchedPage,\n        resolvedHref\n      };\n    }\n\n    if (preflight.redirect) {\n      if (preflight.redirect.startsWith('/')) {\n        const cleanRedirect = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(preflight.redirect) ? delBasePath(preflight.redirect) : preflight.redirect, this.locales).pathname);\n        const {\n          url: newUrl,\n          as: newAs\n        } = prepareUrlAs(this, cleanRedirect, cleanRedirect);\n        return {\n          type: 'redirect',\n          newUrl,\n          newAs\n        };\n      }\n\n      return {\n        type: 'redirect',\n        destination: preflight.redirect\n      };\n    } // For SSR requests, they will be handled like normal pages.\n\n\n    if (preflight.refresh && !preflight.ssr) {\n      return {\n        type: 'refresh'\n      };\n    }\n\n    return {\n      type: 'next'\n    };\n  }\n\n  _getPreflightData(params) {\n    const {\n      preflightHref,\n      shouldCache = false,\n      isPreview\n    } = params;\n    const {\n      href: cacheKey\n    } = new URL(preflightHref, window.location.href);\n\n    if (false) {}\n\n    return fetch(preflightHref, {\n      method: 'HEAD',\n      credentials: 'same-origin',\n      headers: {\n        'x-middleware-preflight': '1'\n      }\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to preflight request`);\n      }\n\n      return {\n        cache: res.headers.get('x-middleware-cache'),\n        redirect: res.headers.get('Location'),\n        refresh: res.headers.has('x-middleware-refresh'),\n        rewrite: res.headers.get('x-middleware-rewrite'),\n        ssr: !!res.headers.get('x-middleware-ssr')\n      };\n    }).then(data => {\n      if (shouldCache && data.cache !== 'no-cache') {\n        this.sde[cacheKey] = data;\n      }\n\n      return data;\n    }).catch(err => {\n      delete this.sde[cacheKey];\n      throw err;\n    });\n  }\n\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n\n    const AppTree = this._wrapApp(App);\n\n    ctx.AppTree = AppTree;\n    return (0, _utils).loadGetInitialProps(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n\n  abortComponentLoad(as, routeProps) {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  get route() {\n    return this.state.route;\n  }\n\n  get pathname() {\n    return this.state.pathname;\n  }\n\n  get query() {\n    return this.state.query;\n  }\n\n  get asPath() {\n    return this.state.asPath;\n  }\n\n  get locale() {\n    return this.state.locale;\n  }\n\n  get isFallback() {\n    return this.state.isFallback;\n  }\n\n  get isPreview() {\n    return this.state.isPreview;\n  }\n\n}\n\nexports[\"default\"] = Router;\nRouter.events = (0, _mitt).default();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/router/router.js\n");

/***/ }),

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var screens_HomeScreen__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! screens/HomeScreen */ \"./screens/HomeScreen.tsx\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-redux */ \"react-redux\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-bootstrap */ \"react-bootstrap\");\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/router */ \"next/router\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/head */ \"next/head\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var src_components_Loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/components/Loader */ \"./components/Loader.tsx\");\n/* harmony import */ var services_productsApi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! services/productsApi */ \"./services/productsApi.ts\");\n/* harmony import */ var services_userApi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! services/userApi */ \"./services/userApi.ts\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next-auth/react */ \"next-auth/react\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__);\nvar _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Desktop\\\\Code\\\\Stonkify\\\\frontend\\\\pages\\\\index.tsx\";\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Home = () => {\n  const router = (0,next_router__WEBPACK_IMPORTED_MODULE_4__.useRouter)();\n  const dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_2__.useDispatch)();\n  const pageNumber = Number(router.query.page) || 1;\n  const keyword = router.query.keyword || \"\";\n  const [tokenLogin] = (0,services_userApi__WEBPACK_IMPORTED_MODULE_8__.useTokenLoginMutation)();\n  const {\n    isLoading,\n    isError,\n    data: productsData\n  } = (0,services_productsApi__WEBPACK_IMPORTED_MODULE_7__.useGetAllProductsQuery)({\n    pageNumber,\n    keyword\n  });\n  const session = (0,next_auth_react__WEBPACK_IMPORTED_MODULE_9__.useSession)();\n  const {\n    data: topProductsData,\n    isLoading: loadingTopProducts\n  } = (0,services_productsApi__WEBPACK_IMPORTED_MODULE_7__.useGetTopRatedProductsQuery)();\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_5___default()), {\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"title\", {\n        children: \"Welcome to Stonkify | Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"meta\", {\n        name: \"description\",\n        content: \"We Sell best Products for Cheap Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"meta\", {\n        name: \"keywords\",\n        content: \"electronics, buy cheap electronics, buy electronics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, undefined)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"main\", {\n      className: \"py-3\",\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__.Container, {\n        children: [isLoading && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(src_components_Loader__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, undefined), isLoading && !isError && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 37\n        }, undefined), (productsData === null || productsData === void 0 ? void 0 : productsData.products) && topProductsData && !isLoading && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(screens_HomeScreen__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n          products: productsData.products,\n          topRatedProducts: topProductsData,\n          keyword: keyword,\n          page: productsData.page,\n          pages: productsData.pages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, undefined)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, undefined)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, undefined)]\n  }, void 0, true);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(Home));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9pbmRleC50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBS0E7QUFDQTs7OztBQUVBLE1BQU1XLElBQWtCLEdBQUcsTUFBTTtBQUMvQixRQUFNQyxNQUFNLEdBQUdSLHNEQUFTLEVBQXhCO0FBQ0EsUUFBTVMsUUFBUSxHQUFHWCx3REFBVyxFQUE1QjtBQUNBLFFBQU1ZLFVBQVUsR0FBR0MsTUFBTSxDQUFDSCxNQUFNLENBQUNJLEtBQVAsQ0FBYUMsSUFBZCxDQUFOLElBQTZCLENBQWhEO0FBQ0EsUUFBTUMsT0FBTyxHQUFJTixNQUFNLENBQUNJLEtBQVAsQ0FBYUUsT0FBZCxJQUFvQyxFQUFwRDtBQUNBLFFBQU0sQ0FBQ0MsVUFBRCxJQUFlVix1RUFBcUIsRUFBMUM7QUFFQSxRQUFNO0FBQ0pXLElBQUFBLFNBREk7QUFFSkMsSUFBQUEsT0FGSTtBQUdKQyxJQUFBQSxJQUFJLEVBQUVDO0FBSEYsTUFJRmhCLDRFQUFzQixDQUFDO0FBQ3pCTyxJQUFBQSxVQUR5QjtBQUV6QkksSUFBQUE7QUFGeUIsR0FBRCxDQUoxQjtBQVFBLFFBQU1NLE9BQU8sR0FBR2QsMkRBQVUsRUFBMUI7QUFDQSxRQUFNO0FBQUVZLElBQUFBLElBQUksRUFBRUcsZUFBUjtBQUF5QkwsSUFBQUEsU0FBUyxFQUFFTTtBQUFwQyxNQUNKbEIsaUZBQTJCLEVBRDdCO0FBR0Esc0JBQ0U7QUFBQSw0QkFDRSwrREFBQyxrREFBRDtBQUFBLDhCQUNFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQURGLGVBRUU7QUFDRSxZQUFJLEVBQUMsYUFEUDtBQUVFLGVBQU8sRUFBQztBQUZWO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBRkYsZUFNRTtBQUNFLFlBQUksRUFBQyxVQURQO0FBRUUsZUFBTyxFQUFDO0FBRlY7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFORjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBREYsZUFZRTtBQUFNLGVBQVMsRUFBQyxNQUFoQjtBQUFBLDZCQUNFLCtEQUFDLHNEQUFEO0FBQUEsbUJBQ0dZLFNBQVMsaUJBQUksK0RBQUMsNkRBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxxQkFEaEIsRUFFR0EsU0FBUyxJQUFJLENBQUNDLE9BQWQsaUJBQXlCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHFCQUY1QixFQUlHLENBQUFFLFlBQVksU0FBWixJQUFBQSxZQUFZLFdBQVosWUFBQUEsWUFBWSxDQUFFSSxRQUFkLEtBQTBCRixlQUExQixJQUE2QyxDQUFDTCxTQUE5QyxpQkFDQywrREFBQywwREFBRDtBQUNFLGtCQUFRLEVBQUVHLFlBQVksQ0FBQ0ksUUFEekI7QUFFRSwwQkFBZ0IsRUFBRUYsZUFGcEI7QUFHRSxpQkFBTyxFQUFFUCxPQUhYO0FBSUUsY0FBSSxFQUFFSyxZQUFZLENBQUNOLElBSnJCO0FBS0UsZUFBSyxFQUFFTSxZQUFZLENBQUNLO0FBTHRCO0FBQUE7QUFBQTtBQUFBO0FBQUEscUJBTEo7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREY7QUFBQTtBQUFBO0FBQUE7QUFBQSxpQkFaRjtBQUFBLGtCQURGO0FBK0JELENBbEREOztBQW9EQSw4RUFBZTVCLDJDQUFJLENBQUNXLElBQUQsQ0FBbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3BhZ2VzL2luZGV4LnRzeD8wN2ZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1lbW8sIHVzZUVmZmVjdCwgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgdHlwZSB7IE5leHRQYWdlIH0gZnJvbSBcIm5leHRcIjtcclxuaW1wb3J0IEhvbWVTY3JlZW4gZnJvbSBcInNjcmVlbnMvSG9tZVNjcmVlblwiO1xyXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xyXG5cclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCI7XHJcbmltcG9ydCBIZWFkIGZyb20gXCJuZXh0L2hlYWRcIjtcclxuaW1wb3J0IExvYWRlciBmcm9tIFwic3JjL2NvbXBvbmVudHMvTG9hZGVyXCI7XHJcblxyXG5pbXBvcnQge1xyXG4gIHVzZUdldEFsbFByb2R1Y3RzUXVlcnksXHJcbiAgdXNlR2V0VG9wUmF0ZWRQcm9kdWN0c1F1ZXJ5LFxyXG59IGZyb20gXCJzZXJ2aWNlcy9wcm9kdWN0c0FwaVwiO1xyXG5cclxuaW1wb3J0IHsgdG9rZW5Mb2dpbiwgdXNlVG9rZW5Mb2dpbk11dGF0aW9uIH0gZnJvbSBcInNlcnZpY2VzL3VzZXJBcGlcIjtcclxuaW1wb3J0IHsgdXNlU2Vzc2lvbiB9IGZyb20gXCJuZXh0LWF1dGgvcmVhY3RcIjtcclxuXHJcbmNvbnN0IEhvbWU6IE5leHRQYWdlPHt9PiA9ICgpID0+IHtcclxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcclxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcbiAgY29uc3QgcGFnZU51bWJlciA9IE51bWJlcihyb3V0ZXIucXVlcnkucGFnZSkgfHwgMTtcclxuICBjb25zdCBrZXl3b3JkID0gKHJvdXRlci5xdWVyeS5rZXl3b3JkIGFzIHN0cmluZykgfHwgXCJcIjtcclxuICBjb25zdCBbdG9rZW5Mb2dpbl0gPSB1c2VUb2tlbkxvZ2luTXV0YXRpb24oKTtcclxuXHJcbiAgY29uc3Qge1xyXG4gICAgaXNMb2FkaW5nLFxyXG4gICAgaXNFcnJvcixcclxuICAgIGRhdGE6IHByb2R1Y3RzRGF0YSxcclxuICB9ID0gdXNlR2V0QWxsUHJvZHVjdHNRdWVyeSh7XHJcbiAgICBwYWdlTnVtYmVyLFxyXG4gICAga2V5d29yZCxcclxuICB9KTtcclxuICBjb25zdCBzZXNzaW9uID0gdXNlU2Vzc2lvbigpO1xyXG4gIGNvbnN0IHsgZGF0YTogdG9wUHJvZHVjdHNEYXRhLCBpc0xvYWRpbmc6IGxvYWRpbmdUb3BQcm9kdWN0cyB9ID1cclxuICAgIHVzZUdldFRvcFJhdGVkUHJvZHVjdHNRdWVyeSgpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPEhlYWQ+XHJcbiAgICAgICAgPHRpdGxlPldlbGNvbWUgdG8gU3RvbmtpZnkgfCBIb21lPC90aXRsZT5cclxuICAgICAgICA8bWV0YVxyXG4gICAgICAgICAgbmFtZT1cImRlc2NyaXB0aW9uXCJcclxuICAgICAgICAgIGNvbnRlbnQ9XCJXZSBTZWxsIGJlc3QgUHJvZHVjdHMgZm9yIENoZWFwIFByaWNlXCJcclxuICAgICAgICAvPlxyXG4gICAgICAgIDxtZXRhXHJcbiAgICAgICAgICBuYW1lPVwia2V5d29yZHNcIlxyXG4gICAgICAgICAgY29udGVudD1cImVsZWN0cm9uaWNzLCBidXkgY2hlYXAgZWxlY3Ryb25pY3MsIGJ1eSBlbGVjdHJvbmljc1wiXHJcbiAgICAgICAgLz5cclxuICAgICAgPC9IZWFkPlxyXG4gICAgICA8bWFpbiBjbGFzc05hbWU9XCJweS0zXCI+XHJcbiAgICAgICAgPENvbnRhaW5lcj5cclxuICAgICAgICAgIHtpc0xvYWRpbmcgJiYgPExvYWRlciAvPn1cclxuICAgICAgICAgIHtpc0xvYWRpbmcgJiYgIWlzRXJyb3IgJiYgPHA+TG9hZGluZy4uLjwvcD59XHJcblxyXG4gICAgICAgICAge3Byb2R1Y3RzRGF0YT8ucHJvZHVjdHMgJiYgdG9wUHJvZHVjdHNEYXRhICYmICFpc0xvYWRpbmcgJiYgKFxyXG4gICAgICAgICAgICA8SG9tZVNjcmVlblxyXG4gICAgICAgICAgICAgIHByb2R1Y3RzPXtwcm9kdWN0c0RhdGEucHJvZHVjdHN9XHJcbiAgICAgICAgICAgICAgdG9wUmF0ZWRQcm9kdWN0cz17dG9wUHJvZHVjdHNEYXRhfVxyXG4gICAgICAgICAgICAgIGtleXdvcmQ9e2tleXdvcmR9XHJcbiAgICAgICAgICAgICAgcGFnZT17cHJvZHVjdHNEYXRhLnBhZ2V9XHJcbiAgICAgICAgICAgICAgcGFnZXM9e3Byb2R1Y3RzRGF0YS5wYWdlc31cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9Db250YWluZXI+XHJcbiAgICAgIDwvbWFpbj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtZW1vKEhvbWUpO1xyXG4iXSwibmFtZXMiOlsibWVtbyIsIkhvbWVTY3JlZW4iLCJ1c2VEaXNwYXRjaCIsIkNvbnRhaW5lciIsInVzZVJvdXRlciIsIkhlYWQiLCJMb2FkZXIiLCJ1c2VHZXRBbGxQcm9kdWN0c1F1ZXJ5IiwidXNlR2V0VG9wUmF0ZWRQcm9kdWN0c1F1ZXJ5IiwidXNlVG9rZW5Mb2dpbk11dGF0aW9uIiwidXNlU2Vzc2lvbiIsIkhvbWUiLCJyb3V0ZXIiLCJkaXNwYXRjaCIsInBhZ2VOdW1iZXIiLCJOdW1iZXIiLCJxdWVyeSIsInBhZ2UiLCJrZXl3b3JkIiwidG9rZW5Mb2dpbiIsImlzTG9hZGluZyIsImlzRXJyb3IiLCJkYXRhIiwicHJvZHVjdHNEYXRhIiwic2Vzc2lvbiIsInRvcFByb2R1Y3RzRGF0YSIsImxvYWRpbmdUb3BQcm9kdWN0cyIsInByb2R1Y3RzIiwicGFnZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/index.tsx\n");

/***/ }),

/***/ "./reducers/authSlice.ts":
/*!*******************************!*\
  !*** ./reducers/authSlice.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"authSlice\": () => (/* binding */ authSlice),\n/* harmony export */   \"logout\": () => (/* binding */ logout),\n/* harmony export */   \"setCredentials\": () => (/* binding */ setCredentials),\n/* harmony export */   \"userInit\": () => (/* binding */ userInit)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @reduxjs/toolkit */ \"@reduxjs/toolkit\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);\n\nconst initialState = {\n  user: null,\n  token: null\n};\nconst authSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    setCredentials: (state, {\n      payload: {\n        user,\n        token\n      }\n    }) => {\n      state.user = user;\n      state.token = token;\n    },\n    userInit: (state, {\n      payload\n    }) => {\n      state.user = payload;\n    },\n    logout: state => {\n      state.user = null;\n      state.token = null;\n    }\n  } // extraReducers : (builder) => ({\n  //   userApi.endpoints\n  // })\n\n});\nconst {\n  setCredentials,\n  logout,\n  userInit\n} = authSlice.actions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZWR1Y2Vycy9hdXRoU2xpY2UudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFXQSxNQUFNQyxZQUE4QixHQUFHO0FBQUVDLEVBQUFBLElBQUksRUFBRSxJQUFSO0FBQWNDLEVBQUFBLEtBQUssRUFBRTtBQUFyQixDQUF2QztBQUVPLE1BQU1DLFNBQVMsR0FBR0osNkRBQVcsQ0FBQztBQUNuQ0ssRUFBQUEsSUFBSSxFQUFFLE1BRDZCO0FBRW5DSixFQUFBQSxZQUZtQztBQUduQ0ssRUFBQUEsUUFBUSxFQUFFO0FBQ1JDLElBQUFBLGNBQWMsRUFBRSxDQUNkQyxLQURjLEVBRWQ7QUFDRUMsTUFBQUEsT0FBTyxFQUFFO0FBQUVQLFFBQUFBLElBQUY7QUFBUUMsUUFBQUE7QUFBUjtBQURYLEtBRmMsS0FLWDtBQUNISyxNQUFBQSxLQUFLLENBQUNOLElBQU4sR0FBYUEsSUFBYjtBQUNBTSxNQUFBQSxLQUFLLENBQUNMLEtBQU4sR0FBY0EsS0FBZDtBQUNELEtBVE87QUFVUk8sSUFBQUEsUUFBUSxFQUFFLENBQUNGLEtBQUQsRUFBUTtBQUFFQyxNQUFBQTtBQUFGLEtBQVIsS0FBOEM7QUFDdERELE1BQUFBLEtBQUssQ0FBQ04sSUFBTixHQUFhTyxPQUFiO0FBQ0QsS0FaTztBQWFSRSxJQUFBQSxNQUFNLEVBQUdILEtBQUQsSUFBVztBQUNqQkEsTUFBQUEsS0FBSyxDQUFDTixJQUFOLEdBQWEsSUFBYjtBQUNBTSxNQUFBQSxLQUFLLENBQUNMLEtBQU4sR0FBYyxJQUFkO0FBQ0Q7QUFoQk8sR0FIeUIsQ0FxQm5DO0FBQ0E7QUFDQTs7QUF2Qm1DLENBQUQsQ0FBN0I7QUEwQkEsTUFBTTtBQUFFSSxFQUFBQSxjQUFGO0FBQWtCSSxFQUFBQSxNQUFsQjtBQUEwQkQsRUFBQUE7QUFBMUIsSUFBdUNOLFNBQVMsQ0FBQ1EsT0FBdkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3JlZHVjZXJzL2F1dGhTbGljZS50cz8wZjBmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNsaWNlLCBQYXlsb2FkQWN0aW9uIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IElVc2VyIGZyb20gXCJpbnRlcmZhY2VzL3VzZXIuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IHVzZXJBcGkgfSBmcm9tIFwic2VydmljZXMvdXNlckFwaVwiO1xyXG5cclxuaW1wb3J0IHsgQXBwU3RhdGUgfSBmcm9tIFwic3RvcmVcIjtcclxuXHJcbmludGVyZmFjZSBJQXV0aEludGlhbFN0YXRlIHtcclxuICB1c2VyOiBudWxsIHwgUGFydGlhbDxJVXNlcj47XHJcbiAgdG9rZW46IG51bGwgfCBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZTogSUF1dGhJbnRpYWxTdGF0ZSA9IHsgdXNlcjogbnVsbCwgdG9rZW46IG51bGwgfTtcclxuXHJcbmV4cG9ydCBjb25zdCBhdXRoU2xpY2UgPSBjcmVhdGVTbGljZSh7XHJcbiAgbmFtZTogXCJhdXRoXCIsXHJcbiAgaW5pdGlhbFN0YXRlLFxyXG4gIHJlZHVjZXJzOiB7XHJcbiAgICBzZXRDcmVkZW50aWFsczogKFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAge1xyXG4gICAgICAgIHBheWxvYWQ6IHsgdXNlciwgdG9rZW4gfSxcclxuICAgICAgfTogUGF5bG9hZEFjdGlvbjx7IHVzZXI6IFBhcnRpYWw8SVVzZXI+OyB0b2tlbjogc3RyaW5nIH0+XHJcbiAgICApID0+IHtcclxuICAgICAgc3RhdGUudXNlciA9IHVzZXI7XHJcbiAgICAgIHN0YXRlLnRva2VuID0gdG9rZW47XHJcbiAgICB9LFxyXG4gICAgdXNlckluaXQ6IChzdGF0ZSwgeyBwYXlsb2FkIH06IFBheWxvYWRBY3Rpb248SVVzZXI+KSA9PiB7XHJcbiAgICAgIHN0YXRlLnVzZXIgPSBwYXlsb2FkO1xyXG4gICAgfSxcclxuICAgIGxvZ291dDogKHN0YXRlKSA9PiB7XHJcbiAgICAgIHN0YXRlLnVzZXIgPSBudWxsO1xyXG4gICAgICBzdGF0ZS50b2tlbiA9IG51bGw7XHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgLy8gZXh0cmFSZWR1Y2VycyA6IChidWlsZGVyKSA9PiAoe1xyXG4gIC8vICAgdXNlckFwaS5lbmRwb2ludHNcclxuICAvLyB9KVxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCB7IHNldENyZWRlbnRpYWxzLCBsb2dvdXQsIHVzZXJJbml0IH0gPSBhdXRoU2xpY2UuYWN0aW9ucztcclxuIl0sIm5hbWVzIjpbImNyZWF0ZVNsaWNlIiwiaW5pdGlhbFN0YXRlIiwidXNlciIsInRva2VuIiwiYXV0aFNsaWNlIiwibmFtZSIsInJlZHVjZXJzIiwic2V0Q3JlZGVudGlhbHMiLCJzdGF0ZSIsInBheWxvYWQiLCJ1c2VySW5pdCIsImxvZ291dCIsImFjdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./reducers/authSlice.ts\n");

/***/ }),

/***/ "./screens/HomeScreen.tsx":
/*!********************************!*\
  !*** ./screens/HomeScreen.tsx ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-bootstrap */ \"react-bootstrap\");\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_bootstrap__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var components_Product__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! components/Product */ \"./components/Product.tsx\");\n/* harmony import */ var src_components_Paginate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/components/Paginate */ \"./components/Paginate.tsx\");\n/* harmony import */ var src_components_ProductsCarousel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/components/ProductsCarousel */ \"./components/ProductsCarousel.tsx\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__);\nvar _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Desktop\\\\Code\\\\Stonkify\\\\frontend\\\\screens\\\\HomeScreen.tsx\";\n\n\n\n\n\n\n\nconst HomeScreen = ({\n  products,\n  keyword,\n  topRatedProducts,\n  pages,\n  page\n}) => {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n    children: [!keyword && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(src_components_ProductsCarousel__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n      topProducts: topRatedProducts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 20\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(\"h1\", {\n      className: \"mt-3\",\n      children: \"Latest Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_0__.Row, {\n      children: products.map(prod => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(react_bootstrap__WEBPACK_IMPORTED_MODULE_0__.Col, {\n        sm: 12,\n        md: 4,\n        xl: 3,\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(components_Product__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n          product: prod\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, undefined)\n      }, prod._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, undefined))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(src_components_Paginate__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      pages: pages,\n      page: page\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, undefined)]\n  }, void 0, true);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HomeScreen);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zY3JlZW5zL0hvbWVTY3JlZW4udHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUNBO0FBR0E7QUFDQTtBQUNBOzs7O0FBRUEsTUFBTUssVUFNSixHQUFHLENBQUM7QUFBRUMsRUFBQUEsUUFBRjtBQUFZQyxFQUFBQSxPQUFaO0FBQXFCQyxFQUFBQSxnQkFBckI7QUFBdUNDLEVBQUFBLEtBQXZDO0FBQThDQyxFQUFBQTtBQUE5QyxDQUFELEtBQTBEO0FBQzdELHNCQUNFO0FBQUEsZUFDRyxDQUFDSCxPQUFELGlCQUFZLDhEQUFDLHVFQUFEO0FBQWtCLGlCQUFXLEVBQUVDO0FBQS9CO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBRGYsZUFFRTtBQUFJLGVBQVMsRUFBQyxNQUFkO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQUZGLGVBR0UsOERBQUMsZ0RBQUQ7QUFBQSxnQkFDR0YsUUFBUSxDQUFDSyxHQUFULENBQWNDLElBQUQsaUJBQ1osOERBQUMsZ0RBQUQ7QUFBb0IsVUFBRSxFQUFFLEVBQXhCO0FBQTRCLFVBQUUsRUFBRSxDQUFoQztBQUFtQyxVQUFFLEVBQUUsQ0FBdkM7QUFBQSwrQkFDRSw4REFBQywwREFBRDtBQUFTLGlCQUFPLEVBQUVBO0FBQWxCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFERixTQUFVQSxJQUFJLENBQUNDLEdBQWY7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFERDtBQURIO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBSEYsZUFVRSw4REFBQywrREFBRDtBQUFVLFdBQUssRUFBRUosS0FBakI7QUFBd0IsVUFBSSxFQUFFQztBQUE5QjtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQVZGO0FBQUEsa0JBREY7QUFjRCxDQXJCRDs7QUF1QkEsaUVBQWVMLFVBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NjcmVlbnMvSG9tZVNjcmVlbi50c3g/YzEyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGQyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBDb2wsIFJvdyB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcclxuXHJcbmltcG9ydCB7IElQcm9kdWN0IH0gZnJvbSBcImludGVyZmFjZXMvcHJvZHVjdHMuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCBQcm9kdWN0IGZyb20gXCJjb21wb25lbnRzL1Byb2R1Y3RcIjtcclxuaW1wb3J0IFBhZ2luYXRlIGZyb20gXCJzcmMvY29tcG9uZW50cy9QYWdpbmF0ZVwiO1xyXG5pbXBvcnQgUHJvZHVjdHNDYXJvdXNlbCBmcm9tIFwic3JjL2NvbXBvbmVudHMvUHJvZHVjdHNDYXJvdXNlbFwiO1xyXG5cclxuY29uc3QgSG9tZVNjcmVlbjogRkM8e1xyXG4gIHByb2R1Y3RzOiBJUHJvZHVjdFtdO1xyXG4gIHRvcFJhdGVkUHJvZHVjdHM6IElQcm9kdWN0W107XHJcbiAga2V5d29yZDogc3RyaW5nO1xyXG4gIHBhZ2VzOiBudW1iZXI7XHJcbiAgcGFnZTogbnVtYmVyO1xyXG59PiA9ICh7IHByb2R1Y3RzLCBrZXl3b3JkLCB0b3BSYXRlZFByb2R1Y3RzLCBwYWdlcywgcGFnZSB9KSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIHsha2V5d29yZCAmJiA8UHJvZHVjdHNDYXJvdXNlbCB0b3BQcm9kdWN0cz17dG9wUmF0ZWRQcm9kdWN0c30gLz59XHJcbiAgICAgIDxoMSBjbGFzc05hbWU9XCJtdC0zXCI+TGF0ZXN0IFByb2R1Y3RzPC9oMT5cclxuICAgICAgPFJvdz5cclxuICAgICAgICB7cHJvZHVjdHMubWFwKChwcm9kOiBJUHJvZHVjdCkgPT4gKFxyXG4gICAgICAgICAgPENvbCBrZXk9e3Byb2QuX2lkfSBzbT17MTJ9IG1kPXs0fSB4bD17M30+XHJcbiAgICAgICAgICAgIDxQcm9kdWN0IHByb2R1Y3Q9e3Byb2R9IC8+XHJcbiAgICAgICAgICA8L0NvbD5cclxuICAgICAgICApKX1cclxuICAgICAgPC9Sb3c+XHJcbiAgICAgIDxQYWdpbmF0ZSBwYWdlcz17cGFnZXN9IHBhZ2U9e3BhZ2V9PjwvUGFnaW5hdGU+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSG9tZVNjcmVlbjtcclxuIl0sIm5hbWVzIjpbIkNvbCIsIlJvdyIsIlByb2R1Y3QiLCJQYWdpbmF0ZSIsIlByb2R1Y3RzQ2Fyb3VzZWwiLCJIb21lU2NyZWVuIiwicHJvZHVjdHMiLCJrZXl3b3JkIiwidG9wUmF0ZWRQcm9kdWN0cyIsInBhZ2VzIiwicGFnZSIsIm1hcCIsInByb2QiLCJfaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./screens/HomeScreen.tsx\n");

/***/ }),

/***/ "./services/productsApi.ts":
/*!*********************************!*\
  !*** ./services/productsApi.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAllProducts\": () => (/* binding */ getAllProducts),\n/* harmony export */   \"getProduct\": () => (/* binding */ getProduct),\n/* harmony export */   \"getRunningOperationPromises\": () => (/* binding */ getRunningOperationPromises),\n/* harmony export */   \"getTopRatedProducts\": () => (/* binding */ getTopRatedProducts),\n/* harmony export */   \"productsApi\": () => (/* binding */ productsApi),\n/* harmony export */   \"useDeleteProductMutation\": () => (/* binding */ useDeleteProductMutation),\n/* harmony export */   \"useGetAllProductsQuery\": () => (/* binding */ useGetAllProductsQuery),\n/* harmony export */   \"useGetProductQuery\": () => (/* binding */ useGetProductQuery),\n/* harmony export */   \"useGetTopRatedProductsQuery\": () => (/* binding */ useGetTopRatedProductsQuery),\n/* harmony export */   \"useUpdateProductMutation\": () => (/* binding */ useUpdateProductMutation)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @reduxjs/toolkit/query/react */ \"@reduxjs/toolkit/query/react\");\n/* harmony import */ var _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var redux_persist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! redux-persist */ \"redux-persist\");\n/* harmony import */ var redux_persist__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(redux_persist__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst productsApi = (0,_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__.createApi)({\n  reducerPath: \"products\",\n  tagTypes: [\"product\"],\n\n  extractRehydrationInfo(action, {\n    reducerPath\n  }) {\n    if (action.type === redux_persist__WEBPACK_IMPORTED_MODULE_1__.REHYDRATE) {\n      return action.payload[reducerPath];\n    }\n  },\n\n  //   keepUnusedDataFor: 60,\n  baseQuery: (0,_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__.fetchBaseQuery)({\n    baseUrl: `${\"http://localhost:5000\"}/api/products`\n  }),\n  endpoints: builder => ({\n    getAllProducts: builder.query({\n      query: ({\n        keyword,\n        pageNumber\n      }) => `?keyword=${keyword}&pageNumber=${pageNumber}`\n    }),\n    getProduct: builder.query({\n      query: id => `/${id}`\n    }),\n    getTopRatedProducts: builder.query({\n      query: () => `/top`\n    }),\n    updateProduct: builder.mutation({\n      query: data => ({\n        url: `${data.productId}`,\n        method: \"PUT\",\n        body: data.product,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          authorization: `Bearer ${data.token}`\n        }\n      })\n    }),\n    deleteProduct: builder.mutation({\n      query: data => ({\n        url: `${data.productId}`,\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          authorization: `Bearer ${data.token}`\n        }\n      })\n    })\n  })\n});\nconst {\n  useGetAllProductsQuery,\n  useGetProductQuery,\n  useGetTopRatedProductsQuery,\n  useUpdateProductMutation,\n  useDeleteProductMutation,\n  util: {\n    getRunningOperationPromises\n  }\n} = productsApi;\nconst {\n  getAllProducts,\n  getProduct,\n  getTopRatedProducts\n} = productsApi.endpoints;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zZXJ2aWNlcy9wcm9kdWN0c0FwaS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBS0E7QUFJTyxNQUFNRyxXQUFXLEdBQUdILHVFQUFTLENBQUM7QUFDbkNJLEVBQUFBLFdBQVcsRUFBRSxVQURzQjtBQUVuQ0MsRUFBQUEsUUFBUSxFQUFFLENBQUMsU0FBRCxDQUZ5Qjs7QUFHbkNDLEVBQUFBLHNCQUFzQixDQUFDQyxNQUFELEVBQVM7QUFBRUgsSUFBQUE7QUFBRixHQUFULEVBQTBCO0FBQzlDLFFBQUlHLE1BQU0sQ0FBQ0MsSUFBUCxLQUFnQk4sb0RBQXBCLEVBQStCO0FBQzdCLGFBQU9LLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlTCxXQUFmLENBQVA7QUFDRDtBQUNGLEdBUGtDOztBQVFuQztBQUNBTSxFQUFBQSxTQUFTLEVBQUVULDRFQUFjLENBQUM7QUFDeEJVLElBQUFBLE9BQU8sRUFBRyxHQUFFQyx1QkFBd0I7QUFEWixHQUFELENBVFU7QUFhbkNHLEVBQUFBLFNBQVMsRUFBR0MsT0FBRCxLQUFjO0FBQ3ZCQyxJQUFBQSxjQUFjLEVBQUVELE9BQU8sQ0FBQ0UsS0FBUixDQUdkO0FBQ0FBLE1BQUFBLEtBQUssRUFBRSxDQUFDO0FBQUVDLFFBQUFBLE9BQUY7QUFBV0MsUUFBQUE7QUFBWCxPQUFELEtBQ0osWUFBV0QsT0FBUSxlQUFjQyxVQUFXO0FBRi9DLEtBSGMsQ0FETztBQVF2QkMsSUFBQUEsVUFBVSxFQUFFTCxPQUFPLENBQUNFLEtBQVIsQ0FBZ0M7QUFDMUNBLE1BQUFBLEtBQUssRUFBR0ksRUFBRCxJQUFTLElBQUdBLEVBQUc7QUFEb0IsS0FBaEMsQ0FSVztBQVd2QkMsSUFBQUEsbUJBQW1CLEVBQUVQLE9BQU8sQ0FBQ0UsS0FBUixDQUFnQztBQUNuREEsTUFBQUEsS0FBSyxFQUFFLE1BQU87QUFEcUMsS0FBaEMsQ0FYRTtBQWN2Qk0sSUFBQUEsYUFBYSxFQUFFUixPQUFPLENBQUNTLFFBQVIsQ0FHYjtBQUNBUCxNQUFBQSxLQUFLLEVBQUdRLElBQUQsS0FBVztBQUNoQkMsUUFBQUEsR0FBRyxFQUFHLEdBQUVELElBQUksQ0FBQ0UsU0FBVSxFQURQO0FBRWhCQyxRQUFBQSxNQUFNLEVBQUUsS0FGUTtBQUdoQkMsUUFBQUEsSUFBSSxFQUFFSixJQUFJLENBQUNLLE9BSEs7QUFJaEJDLFFBQUFBLE9BQU8sRUFBRTtBQUNQLDBCQUFnQixrQkFEVDtBQUVQQyxVQUFBQSxhQUFhLEVBQUcsVUFBU1AsSUFBSSxDQUFDUSxLQUFNO0FBRjdCO0FBSk8sT0FBWDtBQURQLEtBSGEsQ0FkUTtBQTRCdkJDLElBQUFBLGFBQWEsRUFBRW5CLE9BQU8sQ0FBQ1MsUUFBUixDQUNiO0FBQ0VQLE1BQUFBLEtBQUssRUFBR1EsSUFBRCxLQUFXO0FBQ2hCQyxRQUFBQSxHQUFHLEVBQUcsR0FBRUQsSUFBSSxDQUFDRSxTQUFVLEVBRFA7QUFFaEJDLFFBQUFBLE1BQU0sRUFBRSxRQUZRO0FBR2hCRyxRQUFBQSxPQUFPLEVBQUU7QUFDUCwwQkFBZ0Isa0JBRFQ7QUFFUEMsVUFBQUEsYUFBYSxFQUFHLFVBQVNQLElBQUksQ0FBQ1EsS0FBTTtBQUY3QjtBQUhPLE9BQVg7QUFEVCxLQURhO0FBNUJRLEdBQWQ7QUFid0IsQ0FBRCxDQUE3QjtBQXdEQSxNQUFNO0FBQ1hFLEVBQUFBLHNCQURXO0FBRVhDLEVBQUFBLGtCQUZXO0FBR1hDLEVBQUFBLDJCQUhXO0FBSVhDLEVBQUFBLHdCQUpXO0FBS1hDLEVBQUFBLHdCQUxXO0FBTVhDLEVBQUFBLElBQUksRUFBRTtBQUFFQyxJQUFBQTtBQUFGO0FBTkssSUFPVHZDLFdBUEc7QUFTQSxNQUFNO0FBQUVjLEVBQUFBLGNBQUY7QUFBa0JJLEVBQUFBLFVBQWxCO0FBQThCRSxFQUFBQTtBQUE5QixJQUNYcEIsV0FBVyxDQUFDWSxTQURQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zZXJ2aWNlcy9wcm9kdWN0c0FwaS50cz85ZTRmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUFwaSwgZmV0Y2hCYXNlUXVlcnkgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdC9xdWVyeS9yZWFjdFwiO1xyXG5cclxuaW1wb3J0IHsgSUxvZ2luRm9ybURhdGEsIElVc2VyRGF0YSB9IGZyb20gXCJpbnRlcmZhY2VzL2Zvcm1kYXRhLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBJUHJvZHVjdCB9IGZyb20gXCJpbnRlcmZhY2VzL3Byb2R1Y3RzLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBIWURSQVRFIH0gZnJvbSBcIm5leHQtcmVkdXgtd3JhcHBlclwiO1xyXG5pbXBvcnQgeyBSRUhZRFJBVEUgfSBmcm9tIFwicmVkdXgtcGVyc2lzdFwiO1xyXG5cclxuaW1wb3J0IHsgQXBwU3RhdGUgfSBmcm9tIFwic3RvcmVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwcm9kdWN0c0FwaSA9IGNyZWF0ZUFwaSh7XHJcbiAgcmVkdWNlclBhdGg6IFwicHJvZHVjdHNcIixcclxuICB0YWdUeXBlczogW1wicHJvZHVjdFwiXSxcclxuICBleHRyYWN0UmVoeWRyYXRpb25JbmZvKGFjdGlvbiwgeyByZWR1Y2VyUGF0aCB9KSB7XHJcbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09IFJFSFlEUkFURSkge1xyXG4gICAgICByZXR1cm4gYWN0aW9uLnBheWxvYWRbcmVkdWNlclBhdGhdO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgLy8gICBrZWVwVW51c2VkRGF0YUZvcjogNjAsXHJcbiAgYmFzZVF1ZXJ5OiBmZXRjaEJhc2VRdWVyeSh7XHJcbiAgICBiYXNlVXJsOiBgJHtwcm9jZXNzLmVudi5CQUNLRU5EX1VSTH0vYXBpL3Byb2R1Y3RzYCxcclxuICB9KSxcclxuXHJcbiAgZW5kcG9pbnRzOiAoYnVpbGRlcikgPT4gKHtcclxuICAgIGdldEFsbFByb2R1Y3RzOiBidWlsZGVyLnF1ZXJ5PFxyXG4gICAgICB7IHByb2R1Y3RzOiBJUHJvZHVjdFtdOyBwYWdlOiBudW1iZXI7IHBhZ2VzOiBudW1iZXIgfSxcclxuICAgICAgeyBrZXl3b3JkOiBzdHJpbmc7IHBhZ2VOdW1iZXI6IG51bWJlciB9XHJcbiAgICA+KHtcclxuICAgICAgcXVlcnk6ICh7IGtleXdvcmQsIHBhZ2VOdW1iZXIgfSkgPT5cclxuICAgICAgICBgP2tleXdvcmQ9JHtrZXl3b3JkfSZwYWdlTnVtYmVyPSR7cGFnZU51bWJlcn1gLFxyXG4gICAgfSksXHJcbiAgICBnZXRQcm9kdWN0OiBidWlsZGVyLnF1ZXJ5PElQcm9kdWN0LCBzdHJpbmc+KHtcclxuICAgICAgcXVlcnk6IChpZCkgPT4gYC8ke2lkfWAsXHJcbiAgICB9KSxcclxuICAgIGdldFRvcFJhdGVkUHJvZHVjdHM6IGJ1aWxkZXIucXVlcnk8SVByb2R1Y3RbXSwgdm9pZD4oe1xyXG4gICAgICBxdWVyeTogKCkgPT4gYC90b3BgLFxyXG4gICAgfSksXHJcbiAgICB1cGRhdGVQcm9kdWN0OiBidWlsZGVyLm11dGF0aW9uPFxyXG4gICAgICBJUHJvZHVjdCxcclxuICAgICAgeyBwcm9kdWN0SWQ6IHN0cmluZzsgdG9rZW46IHN0cmluZzsgcHJvZHVjdDogUGFydGlhbDxJUHJvZHVjdD4gfVxyXG4gICAgPih7XHJcbiAgICAgIHF1ZXJ5OiAoZGF0YSkgPT4gKHtcclxuICAgICAgICB1cmw6IGAke2RhdGEucHJvZHVjdElkfWAsXHJcbiAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICAgIGJvZHk6IGRhdGEucHJvZHVjdCxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgIGF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtkYXRhLnRva2VufWAsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSksXHJcbiAgICB9KSxcclxuICAgIGRlbGV0ZVByb2R1Y3Q6IGJ1aWxkZXIubXV0YXRpb248bnVsbCwgeyBwcm9kdWN0SWQ6IHN0cmluZzsgdG9rZW46IHN0cmluZyB9PihcclxuICAgICAge1xyXG4gICAgICAgIHF1ZXJ5OiAoZGF0YSkgPT4gKHtcclxuICAgICAgICAgIHVybDogYCR7ZGF0YS5wcm9kdWN0SWR9YCxcclxuICAgICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgIGF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtkYXRhLnRva2VufWAsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pLFxyXG4gICAgICB9XHJcbiAgICApLFxyXG4gIH0pLFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCB7XHJcbiAgdXNlR2V0QWxsUHJvZHVjdHNRdWVyeSxcclxuICB1c2VHZXRQcm9kdWN0UXVlcnksXHJcbiAgdXNlR2V0VG9wUmF0ZWRQcm9kdWN0c1F1ZXJ5LFxyXG4gIHVzZVVwZGF0ZVByb2R1Y3RNdXRhdGlvbixcclxuICB1c2VEZWxldGVQcm9kdWN0TXV0YXRpb24sXHJcbiAgdXRpbDogeyBnZXRSdW5uaW5nT3BlcmF0aW9uUHJvbWlzZXMgfSxcclxufSA9IHByb2R1Y3RzQXBpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHsgZ2V0QWxsUHJvZHVjdHMsIGdldFByb2R1Y3QsIGdldFRvcFJhdGVkUHJvZHVjdHMgfSA9XHJcbiAgcHJvZHVjdHNBcGkuZW5kcG9pbnRzO1xyXG4iXSwibmFtZXMiOlsiY3JlYXRlQXBpIiwiZmV0Y2hCYXNlUXVlcnkiLCJSRUhZRFJBVEUiLCJwcm9kdWN0c0FwaSIsInJlZHVjZXJQYXRoIiwidGFnVHlwZXMiLCJleHRyYWN0UmVoeWRyYXRpb25JbmZvIiwiYWN0aW9uIiwidHlwZSIsInBheWxvYWQiLCJiYXNlUXVlcnkiLCJiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIkJBQ0tFTkRfVVJMIiwiZW5kcG9pbnRzIiwiYnVpbGRlciIsImdldEFsbFByb2R1Y3RzIiwicXVlcnkiLCJrZXl3b3JkIiwicGFnZU51bWJlciIsImdldFByb2R1Y3QiLCJpZCIsImdldFRvcFJhdGVkUHJvZHVjdHMiLCJ1cGRhdGVQcm9kdWN0IiwibXV0YXRpb24iLCJkYXRhIiwidXJsIiwicHJvZHVjdElkIiwibWV0aG9kIiwiYm9keSIsInByb2R1Y3QiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsInRva2VuIiwiZGVsZXRlUHJvZHVjdCIsInVzZUdldEFsbFByb2R1Y3RzUXVlcnkiLCJ1c2VHZXRQcm9kdWN0UXVlcnkiLCJ1c2VHZXRUb3BSYXRlZFByb2R1Y3RzUXVlcnkiLCJ1c2VVcGRhdGVQcm9kdWN0TXV0YXRpb24iLCJ1c2VEZWxldGVQcm9kdWN0TXV0YXRpb24iLCJ1dGlsIiwiZ2V0UnVubmluZ09wZXJhdGlvblByb21pc2VzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./services/productsApi.ts\n");

/***/ }),

/***/ "./services/userApi.ts":
/*!*****************************!*\
  !*** ./services/userApi.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAllUsers\": () => (/* binding */ getAllUsers),\n/* harmony export */   \"getRunningOperationPromises\": () => (/* binding */ getRunningOperationPromises),\n/* harmony export */   \"getUserById\": () => (/* binding */ getUserById),\n/* harmony export */   \"tokenLogin\": () => (/* binding */ tokenLogin),\n/* harmony export */   \"useDeleteUserMutation\": () => (/* binding */ useDeleteUserMutation),\n/* harmony export */   \"useGetAllUsersQuery\": () => (/* binding */ useGetAllUsersQuery),\n/* harmony export */   \"useGetCurrentUserQuery\": () => (/* binding */ useGetCurrentUserQuery),\n/* harmony export */   \"useGetUserByIdQuery\": () => (/* binding */ useGetUserByIdQuery),\n/* harmony export */   \"useLoginMutation\": () => (/* binding */ useLoginMutation),\n/* harmony export */   \"useRegisterMutation\": () => (/* binding */ useRegisterMutation),\n/* harmony export */   \"useTokenLoginMutation\": () => (/* binding */ useTokenLoginMutation),\n/* harmony export */   \"useUpdateUserMutation\": () => (/* binding */ useUpdateUserMutation),\n/* harmony export */   \"useUpdateUserProfileMutation\": () => (/* binding */ useUpdateUserProfileMutation),\n/* harmony export */   \"userApi\": () => (/* binding */ userApi)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @reduxjs/toolkit/query/react */ \"@reduxjs/toolkit/query/react\");\n/* harmony import */ var _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var reducers_authSlice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reducers/authSlice */ \"./reducers/authSlice.ts\");\n/* harmony import */ var redux_persist__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux-persist */ \"redux-persist\");\n/* harmony import */ var redux_persist__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(redux_persist__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst userApi = (0,_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__.createApi)({\n  reducerPath: \"user\",\n  tagTypes: [\"user\"],\n  baseQuery: (0,_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__.fetchBaseQuery)({\n    baseUrl: `${\"http://localhost:5000\"}/api/users`,\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const token = getState().auth.token;\n\n      if (token) {\n        headers.set(\"authorization\", `Bearer ${token}`);\n      }\n\n      return headers;\n    }\n  }),\n\n  extractRehydrationInfo(action, {\n    reducerPath\n  }) {\n    if (action.type === redux_persist__WEBPACK_IMPORTED_MODULE_2__.REHYDRATE) {\n      return action.payload[reducerPath];\n    }\n  },\n\n  endpoints: builder => ({\n    login: builder.mutation({\n      query: ({\n        email,\n        password\n      }) => ({\n        url: \"login\",\n        method: \"POST\",\n        body: {\n          email,\n          password\n        },\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n\n      async onCacheEntryAdded(arg, {\n        dispatch,\n        getState,\n        extra,\n        requestId,\n        cacheEntryRemoved,\n        cacheDataLoaded,\n        getCacheEntry\n      }) {\n        dispatch(reducers_authSlice__WEBPACK_IMPORTED_MODULE_1__.authSlice.actions.setCredentials({\n          token: (await cacheDataLoaded).data.token,\n          user: (await cacheDataLoaded).data\n        }));\n      }\n\n    }),\n    register: builder.mutation({\n      query: ({\n        email,\n        password,\n        name\n      }) => ({\n        url: \"/\",\n        method: \"POST\",\n        body: {\n          name,\n          email,\n          password\n        },\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n    }),\n    getCurrentUser: builder.query({\n      query: ({\n        token\n      }) => ({\n        url: \"/profile\",\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      })\n    }),\n    getUserById: builder.query({\n      query: ({\n        id,\n        token\n      }) => ({\n        url: `/${id}`,\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          authorization: `Bearer ${token}`\n        }\n      })\n    }),\n    updateUserProfile: builder.mutation({\n      query: _ref => {\n        let body = Object.assign({}, _ref);\n        return {\n          url: \"/profile\",\n          method: \"PUT\",\n          body,\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${body.token}`\n          }\n        };\n      },\n      invalidatesTags: [\"user\"]\n    }),\n    updateUser: builder.mutation({\n      query: ({\n        id,\n        body,\n        token\n      }) => ({\n        url: `/${id}`,\n        method: \"PUT\",\n        body,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          authorization: `Bearer ${token}`\n        }\n      }),\n      invalidatesTags: [\"user\"]\n    }),\n    deleteUser: builder.mutation({\n      query: ({\n        id,\n        token\n      }) => ({\n        url: `/${id}`,\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })\n    }),\n    tokenLogin: builder.mutation({\n      query: token => {\n        return {\n          url: \"tokenlogin\",\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n          }\n        };\n      }\n    }),\n    getAllUsers: builder.query({\n      query: token => ({\n        url: `/`,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      }),\n      providesTags: [\"user\"]\n    })\n  })\n});\nconst {\n  useGetAllUsersQuery,\n  useLoginMutation,\n  useRegisterMutation,\n  useGetUserByIdQuery,\n  useDeleteUserMutation,\n  useGetCurrentUserQuery,\n  useUpdateUserMutation,\n  useUpdateUserProfileMutation,\n  useTokenLoginMutation,\n  util: {\n    getRunningOperationPromises\n  }\n} = userApi;\nconst {\n  tokenLogin,\n  getAllUsers,\n  getUserById\n} = userApi.endpoints;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./services/userApi.ts\n");

/***/ }),

/***/ "./node_modules/next/dist/lib/is-error.js":
/*!************************************************!*\
  !*** ./node_modules/next/dist/lib/is-error.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = isError;\nexports.getProperError = getProperError;\nvar _isPlainObject = __webpack_require__(/*! ../shared/lib/is-plain-object */ \"../shared/lib/is-plain-object\");\nfunction isError(err) {\n    return typeof err === 'object' && err !== null && 'name' in err && 'message' in err;\n}\nfunction getProperError(err) {\n    if (isError(err)) {\n        return err;\n    }\n    if (true) {\n        // provide better error for case where `throw undefined`\n        // is called in development\n        if (typeof err === 'undefined') {\n            return new Error('An undefined error was thrown, ' + 'see here for more info: https://nextjs.org/docs/messages/threw-undefined');\n        }\n        if (err === null) {\n            return new Error('A null error was thrown, ' + 'see here for more info: https://nextjs.org/docs/messages/threw-undefined');\n        }\n    }\n    return new Error((0, _isPlainObject).isPlainObject(err) ? JSON.stringify(err) : err + '');\n}\n\n//# sourceMappingURL=is-error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9pcy1lcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2Ysc0JBQXNCO0FBQ3RCLHFCQUFxQixtQkFBTyxDQUFDLG9FQUErQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsSUFBc0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvaXMtZXJyb3IuanM/MTc4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRXJyb3I7XG5leHBvcnRzLmdldFByb3BlckVycm9yID0gZ2V0UHJvcGVyRXJyb3I7XG52YXIgX2lzUGxhaW5PYmplY3QgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9pcy1wbGFpbi1vYmplY3RcIik7XG5mdW5jdGlvbiBpc0Vycm9yKGVycikge1xuICAgIHJldHVybiB0eXBlb2YgZXJyID09PSAnb2JqZWN0JyAmJiBlcnIgIT09IG51bGwgJiYgJ25hbWUnIGluIGVyciAmJiAnbWVzc2FnZScgaW4gZXJyO1xufVxuZnVuY3Rpb24gZ2V0UHJvcGVyRXJyb3IoZXJyKSB7XG4gICAgaWYgKGlzRXJyb3IoZXJyKSkge1xuICAgICAgICByZXR1cm4gZXJyO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgLy8gcHJvdmlkZSBiZXR0ZXIgZXJyb3IgZm9yIGNhc2Ugd2hlcmUgYHRocm93IHVuZGVmaW5lZGBcbiAgICAgICAgLy8gaXMgY2FsbGVkIGluIGRldmVsb3BtZW50XG4gICAgICAgIGlmICh0eXBlb2YgZXJyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignQW4gdW5kZWZpbmVkIGVycm9yIHdhcyB0aHJvd24sICcgKyAnc2VlIGhlcmUgZm9yIG1vcmUgaW5mbzogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvdGhyZXctdW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVyciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignQSBudWxsIGVycm9yIHdhcyB0aHJvd24sICcgKyAnc2VlIGhlcmUgZm9yIG1vcmUgaW5mbzogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvdGhyZXctdW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcigoMCwgX2lzUGxhaW5PYmplY3QpLmlzUGxhaW5PYmplY3QoZXJyKSA/IEpTT04uc3RyaW5naWZ5KGVycikgOiBlcnIgKyAnJyk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/lib/is-error.js\n");

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/client/link */ \"./node_modules/next/dist/client/link.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9saW5rLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlHQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25leHQvbGluay5qcz83NWIzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsaWVudC9saW5rJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/link.js\n");

/***/ }),

/***/ "@reduxjs/toolkit":
/*!***********************************!*\
  !*** external "@reduxjs/toolkit" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@reduxjs/toolkit");

/***/ }),

/***/ "@reduxjs/toolkit/query/react":
/*!***********************************************!*\
  !*** external "@reduxjs/toolkit/query/react" ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@reduxjs/toolkit/query/react");

/***/ }),

/***/ "next-auth/react":
/*!**********************************!*\
  !*** external "next-auth/react" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("next-auth/react");

/***/ }),

/***/ "next/dist/compiled/react-is":
/*!**********************************************!*\
  !*** external "next/dist/compiled/react-is" ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/react-is");

/***/ }),

/***/ "../../../server/denormalize-page-path":
/*!************************************************************!*\
  !*** external "next/dist/server/denormalize-page-path.js" ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/denormalize-page-path.js");

/***/ }),

/***/ "../i18n/normalize-locale-path":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/i18n/normalize-locale-path.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/i18n/normalize-locale-path.js");

/***/ }),

/***/ "../shared/lib/is-plain-object":
/*!**********************************************************!*\
  !*** external "next/dist/shared/lib/is-plain-object.js" ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/is-plain-object.js");

/***/ }),

/***/ "../mitt":
/*!***********************************************!*\
  !*** external "next/dist/shared/lib/mitt.js" ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/mitt.js");

/***/ }),

/***/ "../shared/lib/router-context":
/*!*********************************************************!*\
  !*** external "next/dist/shared/lib/router-context.js" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router-context.js");

/***/ }),

/***/ "./utils/format-url":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/format-url.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/format-url.js");

/***/ }),

/***/ "../shared/lib/router/utils/get-asset-path-from-route":
/*!*********************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-asset-path-from-route.js" ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-asset-path-from-route.js");

/***/ }),

/***/ "./utils/get-middleware-regex":
/*!****************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-middleware-regex.js" ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-middleware-regex.js");

/***/ }),

/***/ "./utils/is-dynamic":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/is-dynamic.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/is-dynamic.js");

/***/ }),

/***/ "./utils/parse-relative-url":
/*!**************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/parse-relative-url.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/parse-relative-url.js");

/***/ }),

/***/ "./utils/querystring":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/querystring.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/querystring.js");

/***/ }),

/***/ "./utils/resolve-rewrites":
/*!************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/resolve-rewrites.js" ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/resolve-rewrites.js");

/***/ }),

/***/ "./utils/route-matcher":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-matcher.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-matcher.js");

/***/ }),

/***/ "./utils/route-regex":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-regex.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-regex.js");

/***/ }),

/***/ "../utils":
/*!************************************************!*\
  !*** external "next/dist/shared/lib/utils.js" ***!
  \************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/utils.js");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/head");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/router");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react-bootstrap":
/*!**********************************!*\
  !*** external "react-bootstrap" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-bootstrap");

/***/ }),

/***/ "react-redux":
/*!******************************!*\
  !*** external "react-redux" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-redux");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "redux-persist":
/*!********************************!*\
  !*** external "redux-persist" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("redux-persist");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/index.tsx"));
module.exports = __webpack_exports__;

})();